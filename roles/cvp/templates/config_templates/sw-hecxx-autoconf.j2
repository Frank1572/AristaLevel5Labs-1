{"name":"sw-hec{{ hec.hec_nr }}-autoconf","data":{"formList":[{"fieldId":"leafNrInput","fieldLabel":"Leaf Number","type":"Text box","value":"","depends":"","validation":{"mandatory":false},"dataValidation":"","helpText":"","configletBuilderId":"configletBuilderMapper_8062_1533453647834190","orderId":0,"key":"field_1_1556002500295","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"leafType","fieldLabel":"Leaf Type:","type":"Radio button","value":"hvx,hana,hvv","depends":"","validation":{"mandatory":true},"dataValidation":"","helpText":"","configletBuilderId":"configletBuilderMapper_8062_1533453647834190","orderId":1,"key":"field_2_1556002566072","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"snmpContact","fieldLabel":"SNMP Contact (format: 'Equi:console-server:port')","type":"Text box","value":"","depends":"","validation":{"mandatory":false},"dataValidation":"","helpText":"","configletBuilderId":"configletBuilderMapper_8062_1533453647834190","orderId":2,"key":"field_3_1556002650464","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"snmpLocation","fieldLabel":"SNMP Location","type":"Text box","value":"","depends":"","validation":{"mandatory":false},"dataValidation":"","helpText":"","configletBuilderId":"configletBuilderMapper_8062_1533453647834190","orderId":3,"key":"field_4_1556002680982","dataValidationErrorExist":false,"previewValue":""}],"type":"BUILDER_WITHOUT_DRAFT","main_script":{"data":"import jsonrpclib\r\nfrom cvplibrary import CVPGlobalVariables, GlobalVariableNames\r\nfrom cvplibrary import RestClient\r\nfrom cvplibrary import Form\r\nimport sys\r\nimport json\r\nimport cvp\r\nimport cvpServices\r\nimport errorCodes\r\nimport socket\r\nimport time\r\nimport ssl\r\n\r\n\r\nSPINES     = {'sw-hec{{ hec.hec_nr }}-spine-11','sw-hec{{ hec.hec_nr }}-spine-12','sw-hec{{ hec.hec_nr }}-spine-13','sw-hec{{ hec.hec_nr }}-spine-14'}\r\nIBGP_PEER  = {'a': '198.19.224.2', 'b': '198.19.224.1'}\r\nIF_SETUP   = {'7160-32CQ':   [{'if': '29\/1,30\/1,31\/1,32\/1', 'speed': 'forced 40gfull'}],\r\n              '7160-48YC6':  [{'if': '51\/1,52\/1,53\/1,54\/1', 'speed': 'forced 40gfull'}],\r\n              '7280QR-C36':  [{'if': '25\/1,26\/1,35\/1,36\/1', 'speed': 'forced 100gfull'}],\r\n              '7280SR-48C6': [{'if': '51\/1,52\/1,53\/1,54\/1', 'speed': 'forced 100gfull'}]\r\n             }\r\nLOCATION   = 'hec{{ hec.hec_nr }}' # used in 'sw-XXX-hana-01a'\r\nSPINE_AS   = '641{{ hec.hec_nr }}.10000'\r\nLEAF_AS1   = 641{{ hec.hec_nr }}\r\nLEAF_AS2   = 11000\r\nIBGP_RTMAX = 12000\r\nEBGP_RTMAX = 12000\r\nPOD        = 1\r\nMA_VRF     = 'OOB'\r\nMA_DOMAIN  = '{{ hec.ma_domain }}'\r\nMA_MASK    = {{ hec.oob_mask }}\r\nLO900_VRF  = ''\r\nLO900_DOMAIN = '{{ hec.lo900_domain }}'\r\n\r\n# ================================================================================\r\n# Providing an -unverififed- default context. We're only using it in ZTP, so no\r\n# security concerns to be raised.\r\n# ================================================================================\r\n\r\nif ((sys.version_info.major == 3) or\r\n    (sys.version_info.major == 2 and sys.version_info.minor == 7 and sys.version_info.micro >= 5)):\r\n    ssl._create_default_https_context = ssl._create_unverified_context\r\n# ================================================================================\r\n\r\n\r\ndef main():\r\n  # ================================================================================\r\n  # The autoconf script automatically creates configlets:\r\n  #   sw-hec{{ hec.hec_nr }}-hana-7160-32CQ =(static)= model-based template\r\n  #   mlag-[a|b] =(static)= will be assigned based on \"a\" or \"b\" position in MLAG\r\n  #   sw-hec{{ hec.hec_nr }}-hana-01 =(individual\/pair)= auto-generated based on position\r\n  #   sw-hec{{ hec.hec_nr }}-hana-01[a|b] =(individual)= auto-generated based on position\r\n  # ================================================================================\r\n  \r\n  # Get values from the interactive form:\r\n  # - the number used in 'sw-hec{{ hec.hec_nr }}-hana-XXa'\r\n  leafNrInputS = str(Form.getFieldById('leafNrInput').getValue())\r\n  # - the type used in 'sw-hec{{ hec.hec_nr }}-XXX-01a'\r\n  leafType     = str(Form.getFieldById('leafType').getValue())\r\n  # - SNMP contact, normally in format: 'Equi:console-server:port'\r\n  snmpContact  = str(Form.getFieldById('snmpContact').getValue())\r\n  # - SNMP location, normally in format: 'Country-DC-Cage-Row-Rack-Position'\r\n  snmpLocation = str(Form.getFieldById('snmpLocation').getValue())\r\n\r\n  try:\r\n    leafNrInput = int (leafNrInputS)\r\n  except:\r\n    leafNrInput = 0\r\n  \r\n  ztp = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_STATE)\r\n  ip  = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_IP)\r\n  mac = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_MAC)\r\n  \r\n  cvpuser   = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_USERNAME)\r\n  cvppasswd = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_PASSWORD)\r\n  user      = cvpuser    # Device access credentials\r\n  passwd    = cvppasswd  # usually equal to CVP access credentials, besides of ZTP mode\r\n  \r\n  if ztp == 'true':\r\n      user   = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_USERNAME)\r\n      passwd = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_PASSWORD)\r\n  \r\n  # =======================================================\r\n  # Start the CVP session\r\n  # =======================================================\r\n  \r\n  server = cvp.Cvp('localhost')\r\n  try:\r\n    server.authenticate(cvpuser, cvppasswd)\r\n  except Exception as err:\r\n    print \"! ERROR: Unable to authenticate to the CVP server as user: %s (%s)\" % (cvpuser, err)\r\n    # raise cvpServices.CvpError (errorCodes.INVALID_ARGUMENT, \"Something went wrong\")\r\n    return\r\n  \r\n  # Provides dev.ipAddress, dev.fqdn, dev.macAddress, dev.containerName,\r\n  # dev.status, dev.model, dev.sn\r\n  try:\r\n    dev = server.getDevice (mac)\r\n    leafModel   = dev.model.lstrip('DCS-')  # Remove 'DCS-' at the beginning\r\n#    leafModel,_ = leafModel.rsplit ('-', 1) # Remove '-F'\/'-R' at the end\r\n  except Exception as err:\r\n    print \"! ERROR: Something went wrong during switch model identification (%s)\" % (err)\r\n    return\r\n\r\n  \r\n  # =======================================================\r\n  # Interacting with the switch\r\n  # =======================================================\r\n  \r\n  url    = \"https:\/\/%s:%s@%s\/command-api\" % (user, passwd, ip)\r\n  switch = jsonrpclib.Server(url)\r\n\r\n  try:  \r\n    # Pre-condition the uplinks:\r\n    for iface in IF_SETUP[leafModel]:\r\n      _ = switch.runCmds(1, [\"enable\", \"configure\", \"interface Ethernet%s\" % iface['if'], \"speed %s\" % iface['speed']])\r\n  except Exception as err:\r\n    print \"! ERROR: Not able to contact device to precondition the uplinks: %s (%s)\" % (ip, err)\r\n    return\r\n  \r\n  # Wait for LLDP neighbors to update (10s):\r\n  time.sleep (10)\r\n  \r\n  # Get the LLDP neighbor list:\r\n  try:\r\n    lldpNeighbors = switch.runCmds (1, [\"enable\", \"show lldp neighbors\"])[1][\"lldpNeighbors\"]\r\n  except Exception as err:\r\n    print \"! ERROR: Not able to contact device to discover the neighbors: %s (%s)\" % (ip, err)\r\n    return\r\n  \r\n  spineMod     = ''\r\n  spinePort    = ''\r\n  oldSpine     = ''\r\n  oldSpineMod  = ''\r\n  oldSpinePort = ''\r\n  \r\n  config  = ('snmp-server contact %s\\n' % snmpContact)\r\n  config += ('snmp-server location %s\\n!\\n' % snmpLocation)\r\n\r\n  try:  \r\n    for neighbor in lldpNeighbors:\r\n        nghb = str(neighbor['neighborDevice'].split('.')[0])\r\n        if (nghb in SPINES):\r\n            nghbPort = neighbor['neighborPort'][8:] # Ignoring leading \"Ethernet\"\r\n            if ('\/' in nghbPort):\r\n                spineMod, spinePort, _ = nghbPort.split(\"\/\")\r\n            else:\r\n                spineMod  = \"3\" # Equiv to the first LC in a chassis\r\n                spinePort = nghbPort\r\n    \r\n            leafNr  = ((int(spineMod)-3) * 36 + int(spinePort) -1) \/ 2 + 1\r\n            leafLtr = \"ba\"[int(spinePort) % 2]\r\n            leafIP  = ((int(spineMod)-3) * 36 + int(spinePort) -1) * 2 + 1\r\n    \r\n            config += ('interface %s\\n' % neighbor['port'])\r\n            config += ('   description LLDP:%s:%s\\n' % (nghb, neighbor['neighborPort']))\r\n            config += ('   ip address 10.%s.%s.%s\/31\\n' % (nghb[-2:], leafIP \/ 256, leafIP % 256))\r\n            config += ('   mtu 9100\\n')\r\n            config += ('!\\n')\r\n    \r\n            if (oldSpine != \"\"):\r\n                if (oldSpineMod != spineMod):\r\n                    print (\"! ERROR: Cabling mismatch, %s:%s%s vs %s:%s%s\" % (spine, spineMod, spinePort, oldSpine, oldSpineMod, oldSpinePort))\r\n                if (oldSpinePort != spinePort):\r\n                    print (\"! ERROR: Cabling mismatch, %s:%s%s vs %s:%s%s\" % (spine, spineMod, spinePort, oldSpine, oldSpineMod, oldSpinePort))\r\n    \r\n            oldSpine     = nghb\r\n            oldSpineMod  = spineMod\r\n            oldSpinePort = spinePort\r\n  except Exception as err:\r\n    print \"! ERROR: Position calculation went wrong (%s)\" % (err)\r\n    return\r\n  \r\n  if (leafNrInput == 0):\r\n      leafNrInput = leafNr\r\n  \r\n  hostName = 'sw-%s-%s-%02d%s' % (LOCATION, leafType, leafNrInput, leafLtr)\r\n  mlagName = 'sw-%s-%s-%02d'   % (LOCATION, leafType, leafNrInput)\r\n  \r\n  config = 'hostname %s\\n!\\n%s' % (hostName, config)\r\n  \r\n  # ========== Lo1 config ==========\r\n  config += ('interface Loopback1\\n')\r\n  config += ('   description Router-ID\\n')\r\n  oct4 = 100 if leafLtr == 'b' else 0\r\n  lo1 = '10.%s.%s.%s' % (100 + leafNr\/100, POD, leafNr%100 + oct4)\r\n  config += ('   ip address %s\/32\\n' % lo1)\r\n  config += ('!\\n')\r\n  \r\n  # ========== Ma1 config ==========\r\n  config += ('interface Management1\\n')\r\n  if (MA_VRF != ''):\r\n      config += ('   vrf forwarding %s\\n' % MA_VRF)\r\n  # DNS lookup for hostname to discover Ma1 IP\r\n  try:\r\n    config += ('   ip address %s\/%s\\n' % (socket.gethostbyname (hostName + '.' + MA_DOMAIN), MA_MASK))\r\n  except Exception as err:\r\n    print \"! ERROR: Not able to resolve Ma1-hostname: %s (%s)\" % (hostName + '.' + MA_DOMAIN, err)\r\n    return\r\n  config += ('!\\n')\r\n  \r\n  # ========== Lo900 config ==========\r\n  try:\r\n    lo900 = socket.gethostbyname (hostName + '.' + LO900_DOMAIN)\r\n  except Exception as err:\r\n    print \"! ERROR: Not able to resolve Lo900-hostname: %s (%s)\" % (hostName + '.' + LO900_DOMAIN, err)\r\n    return\r\n  \r\n  config += ('interface Loopback900\\n')\r\n  if (LO900_VRF != ''):\r\n      config += ('   vrf forwarding %s\\n' % LO900_VRF)\r\n  config += ('   ip address %s\/32\\n' % lo900)\r\n  config += ('!\\n')\r\n  # ====================\r\n  \r\n  config += ('router bgp %s.%s\\n' % (LEAF_AS1, LEAF_AS2+leafNr))\r\n  config += ('   router-id %s\\n' % lo1)\r\n  config += ('   network %s\/32\\n' % lo1)\r\n  config += ('   network %s\/32\\n' % lo900)\r\n  for spine in SPINES:\r\n      config += ('   neighbor 10.%s.%s.%s peer-group SPINE-PG\\n' % (spine[-2:], leafIP \/ 256, leafIP % 256 - 1))\r\n  config += ('   neighbor %s peer-group MLPEER-PG\\n' % IBGP_PEER[leafLtr])\r\n  config += ('!\\n')\r\n  \r\n  # ====================\r\n  \r\n  confPair  = ('mlag configuration\\n')\r\n  confPair += ('   domain-id %s\\n' % mlagName)\r\n  confPair += ('!\\n')\r\n  confPair += ('interface Loopback2\\n')\r\n  confPair += ('   description VTEP\\n')\r\n  lo2 = '10.%s.%s.%s' % (200 + leafNr\/100, POD, leafNr%100)\r\n  confPair += ('   ip address %s\/32\\n' % lo2)\r\n  confPair += ('!\\n')\r\n\r\n  confPair += ('router bgp %s.%s\\n' % (LEAF_AS1, LEAF_AS2+leafNr))\r\n  confPair += ('   bgp asn notation asdot\\n')\r\n  confPair += ('   maximum-paths 8 ecmp 16\\n')\r\n  confPair += ('   neighbor EVPN-PG peer-group\\n')\r\n  confPair += ('   neighbor EVPN-PG remote-as %s\\n' % SPINE_AS)\r\n  confPair += ('   neighbor EVPN-PG update-source Loopback1\\n')\r\n  confPair += ('   neighbor EVPN-PG send-community standard extended\\n')\r\n  confPair += ('   neighbor EVPN-PG ebgp-multihop 2\\n')\r\n  confPair += ('   neighbor EVPN-PG maximum-routes %s\\n' % EBGP_RTMAX)\r\n  confPair += ('   neighbor EVPN-PG fall-over bfd\\n')\r\n  confPair += ('!\\n')\r\n  confPair += ('   neighbor SPINE-PG peer-group\\n')\r\n  confPair += ('   neighbor SPINE-PG remote-as %s\\n' % SPINE_AS)\r\n  confPair += ('   neighbor SPINE-PG soft-reconfiguration inbound all\\n')\r\n  confPair += ('   neighbor SPINE-PG send-community\\n')\r\n  confPair += ('   neighbor SPINE-PG route-map MLPEER-RM out\\n')\r\n  confPair += ('   neighbor SPINE-PG maximum-routes %s\\n' % EBGP_RTMAX)\r\n  confPair += ('   neighbor SPINE-PG fall-over bfd\\n')\r\n  confPair += ('!\\n')\r\n  confPair += ('   neighbor MLPEER-PG peer-group\\n')\r\n  confPair += ('   neighbor MLPEER-PG remote-as %s.%s\\n' % (LEAF_AS1, LEAF_AS2+leafNr))\r\n  confPair += ('   neighbor MLPEER-PG next-hop-self\\n')\r\n  confPair += ('   neighbor MLPEER-PG maximum-routes %s\\n' % IBGP_RTMAX)\r\n  confPair += ('   neighbor MLPEER-PG fall-over bfd\\n')\r\n  confPair += ('   network %s\/32\\n' % lo2)\r\n  confPair += ('!\\n')\r\n  confPair += ('   neighbor 10.100.0.11 peer-group EVPN-PG\\n')\r\n  confPair += ('   neighbor 10.100.0.12 peer-group EVPN-PG\\n')\r\n  confPair += ('   neighbor 10.100.0.13 peer-group EVPN-PG\\n')\r\n  confPair += ('   neighbor 10.100.0.14 peer-group EVPN-PG\\n')\r\n  confPair += ('!\\n')\r\n  confPair += ('   address-family evpn\\n')\r\n  confPair += ('      neighbor EVPN-PG activate\\n')\r\n  confPair += ('   !\\n')\r\n  confPair += ('   address-family ipv4\\n')\r\n  confPair += ('      no neighbor EVPN-PG activate\\n')\r\n  confPair += ('   !\\n')\r\n  confPair += ('   address-family ipv6\\n')\r\n  confPair += ('      no neighbor EVPN-PG activate\\n')\r\n  confPair += ('   !\\n')\r\n  confPair += ('   vlan-aware-bundle service-vlans\\n')\r\n  confPair += ('      rd %s:1\\n' % lo1)\r\n  confPair += ('      route-target both 1:1\\n')\r\n  confPair += ('      redistribute learned\\n')\r\n  confPair += ('      vlan 5-2999\\n')\r\n  confPair += ('   !\\n')\r\n  \r\n  # =======================================================\r\n  # Writing the configs as templates into CVP\r\n  # =======================================================\r\n  \r\n  print \"! === autoconf report ===\"\r\n  \r\n  # ================================================================\r\n  # Assign the existing model-specific configlet (like \"7160-32CQ\")\r\n  # ================================================================\r\n  configlet_name = 'sw-%s-%s-%s' % (LOCATION, leafType, leafModel)\r\n  \r\n  try:\r\n    cfg = server.cvpService.getConfigletByName (configlet_name)\r\n    server.cvpService.applyConfigletToDevice(dev.ipAddress, dev.fqdn, mac, [configlet_name], [cfg['key']], [], [])\r\n    print ('! Configlet %s assigned' % configlet_name)\r\n  except Exception as err:\r\n    print \"! ERROR: Required configlet %s does not exist! (%s)\" % (configlet_name, err)\r\n    return\r\n  \r\n  # =======================================================\r\n  # Assign the existing mlag configlet\r\n  # =======================================================\r\n  configlet_name = 'sw-mlag-%s' % leafLtr\r\n  \r\n  try:\r\n    cfg = server.cvpService.getConfigletByName (configlet_name)\r\n    server.cvpService.applyConfigletToDevice(dev.ipAddress, dev.fqdn, mac, [configlet_name], [cfg['key']], [], [])\r\n    print ('! Configlet %s assigned' % configlet_name)\r\n  except Exception as err:\r\n    print \"! ERROR: Required configlet %s does not exist! (%s)\" % (configlet_name, err)\r\n    return\r\n  \r\n  # =======================================================\r\n  # (Create and) Assign the pair configlet (confPair)\r\n  # =======================================================\r\n  configlet_name = '%s' % mlagName\r\n  \r\n  try:\r\n    cfg = server.cvpService.getConfigletByName (configlet_name)\r\n    print ('! Configlet %s already exists, using it' % configlet_name)\r\n  except cvp.cvpServices.CvpError as err:\r\n    if (err.errorCode == errorCodes.ENTITY_DOES_NOT_EXIST):\r\n      try:\r\n        server.cvpService.addConfiglet(configlet_name, confPair)\r\n        cfg = server.cvpService.getConfigletByName (configlet_name)\r\n        print ('! Configlet %s created' % configlet_name)\r\n      except Exception as err:\r\n        print \"! ERROR: Not able to add configlet %s! (%s)\" % (configlet_name, err)\r\n        return\r\n    else:\r\n      print \"! ERROR: Communication issues with configlet %s! (%s)\" % (configlet_name, err)\r\n      return\r\n  \r\n  try:\r\n    server.cvpService.applyConfigletToDevice(dev.ipAddress, dev.fqdn, mac, [configlet_name], [cfg['key']], [], [])\r\n    print ('! Configlet %s assigned' % configlet_name)\r\n  except Exception as err:\r\n    print \"! ERROR: Not able to assign configlet %s! (%s)\" % (configlet_name, err)\r\n    return\r\n  \r\n  # =======================================================\r\n  # Create and assign the individual configlet (config)\r\n  # =======================================================\r\n  configlet_name = '%s' % hostName\r\n  \r\n  try:\r\n    cfg = server.cvpService.getConfigletByName (configlet_name)\r\n    print ('! Configlet %s already exists. Delete\/rename to re-create!' % configlet_name)\r\n  except cvp.cvpServices.CvpError as err:\r\n    if (err.errorCode == errorCodes.ENTITY_DOES_NOT_EXIST):\r\n      try:\r\n        server.cvpService.addConfiglet (configlet_name, config)\r\n        cfg = server.cvpService.getConfigletByName (configlet_name)\r\n        server.cvpService.applyConfigletToDevice (dev.ipAddress, dev.fqdn, mac, [configlet_name], [cfg['key']], [], [])\r\n        print \"! Configlet %s created and assigned\" % configlet_name\r\n      except Exception as err:\r\n        print \"! ERROR: Not able to add configlet %s! (%s)\" % (configlet_name, err)\r\n        return\r\n    else:\r\n      print \"! ERROR: Communication issues with configlet %s! (%s)\" % (configlet_name, err)\r\n      return\r\n  \r\n  # =======================================================\r\n  \r\n  # =======================================================\r\n  # Create and assign the pair an empty CFM configlet for hana cells \r\n  # =======================================================\r\n  \r\n  if leafType == 'hana':\r\n    configlet_name = '%s.cfm' % mlagName\r\n  \r\n    try:\r\n\t    cfg = server.cvpService.getConfigletByName (configlet_name)\r\n\t    print ('! Configlet %s already exists, using it' % configlet_name)\r\n    except cvp.cvpServices.CvpError as err:\r\n\t    if (err.errorCode == errorCodes.ENTITY_DOES_NOT_EXIST):\r\n\t      try:\r\n\t        server.cvpService.addConfiglet(configlet_name, \"\")\r\n\t        cfg = server.cvpService.getConfigletByName (configlet_name)\r\n\t        print ('! Configlet %s created' % configlet_name)\r\n\t      except Exception as err:\r\n\t        print \"! ERROR: Not able to add configlet %s! (%s)\" % (configlet_name, err)\r\n\t        return\r\n\t    else:\r\n\t      print \"! ERROR: Communication issues with configlet %s! (%s)\" % (configlet_name, err)\r\n\t      return\r\n  \r\n    try:\r\n\t    server.cvpService.applyConfigletToDevice(dev.ipAddress, dev.fqdn, mac, [configlet_name], [cfg['key']], [], [])\r\n\t    print ('! Configlet %s assigned' % configlet_name)\r\n    except Exception as err:\r\n\t    print \"! ERROR: Not able to assign configlet %s! (%s)\" % (configlet_name, err)\r\n\t    return\r\n  \r\n  # =======================================================\r\n  \r\n  print \"! =======================\"\r\n  print config\r\n\r\nmain()\r\n","key":null}}}
