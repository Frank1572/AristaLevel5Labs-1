{"name":"sw-hec19-descriptions-hvv","data":{"formList":[{"fieldId":"serverNames","fieldLabel":"Connected servers, list of hostnames on separate lines:","type":"Text area","value":"","depends":"","validation":{"mandatory":false},"dataValidation":"","helpText":"Enter the hostnames of connected servers, line by line, no punctuation","configletBuilderId":"configletBuilderMapper_8796_1563875716778395","orderId":0,"key":"fieldId_30220_13158559483978490","dataValidationErrorExist":false,"previewValue":""}],"type":"BUILDER_WITHOUT_DRAFT","main_script":{"data":"import jsonrpclib\r\nfrom cvplibrary import CVPGlobalVariables, GlobalVariableNames\r\nfrom cvplibrary import RestClient\r\nfrom cvplibrary import Form\r\nimport sys\r\nimport json\r\nimport cvp\r\nimport cvpServices\r\nimport errorCodes\r\nimport socket\r\nimport ssl\r\n\r\nPO_MAX     = 24\r\nPO_RANGE   = {101,151}\r\n\r\n# ================================================================================\r\n# Providing an -unverififed- default context. We're only using it in ZTP, so no\r\n# security concerns to be raised.\r\n# ================================================================================\r\n\r\nif ((sys.version_info.major == 3) or\r\n    (sys.version_info.major == 2 and sys.version_info.minor == 7 and sys.version_info.micro >= 5)):\r\n    ssl._create_default_https_context = ssl._create_unverified_context\r\n# ================================================================================\r\n\r\n\r\ndef main():\r\n  # ================================================================================\r\n  # The autoconf.desc script automatically creates configlets:\r\n  #   sw-hec19-hana-01.desc =(individual\/pair)= auto-generated based on\r\n  #   the server names (in form) and Port-Channels and their members on the switch\r\n  # The configlet is created for the first switch in pair, the second switch\r\n  #   just re-uses the same configlet, without overwriting it\r\n  # ================================================================================\r\n\r\n  # Get values from the interactive form\r\n  serverNames  = str(Form.getFieldById('serverNames').getValue())\r\n  \r\n  ztp = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_STATE)\r\n  ip  = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_IP)\r\n  mac = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_MAC)\r\n  \r\n  cvpuser   = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_USERNAME)\r\n  cvppasswd = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_PASSWORD)\r\n  user      = cvpuser    # Device access credentials,\r\n  passwd    = cvppasswd  # usually the same as CVP server credentials, besides in ZTP mode\r\n  \r\n  if ztp == 'true':\r\n      user   = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_USERNAME)\r\n      passwd = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_PASSWORD)\r\n  \r\n  # =======================================================\r\n  # Start the CVP session\r\n  # =======================================================\r\n  \r\n  server = cvp.Cvp('localhost')\r\n  try:\r\n    server.authenticate(cvpuser, cvppasswd)\r\n  except Exception as err:\r\n    print '! ERROR: Unable to authenticate to the CVP server as user: %s (%s)' % (cvpuser, err)\r\n    return\r\n\r\n  \r\n  # Provides dev.ipAddress, dev.fqdn, dev.macAddress, dev.containerName,\r\n  # dev.status, dev.model, dev.sn\r\n  try:\r\n    dev = server.getDevice (mac)\r\n    hostName = dev.fqdn.split ('.')[0]  # Remove domain name (after '.')\r\n    mlagName = hostName [0:-1] # Remove trainling a\/b\r\n  except Exception as err:\r\n    print '! ERROR: Something went wrong during hostname identification (%s)' % (err)\r\n    return\r\n  \r\n  \r\n  # =======================================================\r\n  # Create configlet name\r\n  # =======================================================\r\n  if 'ipmi' in hostName:\r\n    configlet_name = '%s.desc' % hostName\r\n  else:\r\n    configlet_name = '%s.desc' % mlagName    \r\n  \r\n  try:\r\n    cfg = server.cvpService.getConfigletByName (configlet_name) # If the configlet already exists, we can just re-use it\r\n    print ('! Configlet %s already exists, using it' % configlet_name)\r\n    try:\r\n      server.cvpService.applyConfigletToDevice (dev.ipAddress, dev.fqdn, mac, [configlet_name], [cfg['key']], [], [])\r\n      print ('! Configlet %s assigned' % configlet_name)\r\n      print '! ======================='\r\n      return\r\n    except Exception as err:\r\n      print '! ERROR: Not able to assign configlet %s! (%s)' % (configlet_name, err)\r\n      return\r\n  except cvp.cvpServices.CvpError as err:\r\n    if (err.errorCode == errorCodes.ENTITY_DOES_NOT_EXIST):  # If the configlet does not exist, start the script\r\n\r\n      url    = 'https:\/\/%s:%s@%s\/command-api' % (user, passwd, ip)\r\n      switch = jsonrpclib.Server(url)\r\n      \r\n      confPair = ''\r\n      \r\n      # ==========================================================\r\n      # Read the available Port-Channels and provide descriptions\r\n      # ==========================================================\r\n      \r\n      if 'ipmi' in hostName:\r\n        ifaceCtr = 1\r\n        for sName in serverNames.split('\\n'):\r\n          confPair += ('interface Ethernet%s\\n' % ifaceCtr )\r\n          confPair += ('   description \"%s\"\\n' % sName)\r\n          confPair += ('!\\n')\r\n          ifaceCtr += 1\r\n        \r\n      else:\r\n\r\n        try:\r\n          poInfo = switch.runCmds (1, ['enable', {'cmd': 'show port-channel'}])[1]['portChannels']\r\n        except Exception as err:\r\n          print '! ERROR: Not able to contact device to get the list of port-channels: %s (%s)' % (ip, err)\r\n          return\r\n\r\n        for poStart in PO_RANGE:\r\n          poIndex = poStart\r\n          for sName in serverNames.split('\\n'): # Split the server-names text field line by line\r\n            confPair += ('interface Port-Channel%s\\n' % poIndex)  # Configure the if description for the PoXX  port\r\n            confPair += ('   description \"%s\"\\n' % sName)\r\n            confPair += ('!\\n')\r\n            for poMember in poInfo['Port-Channel%d' % poIndex]['activePorts']: # ... and then for all active members\r\n              if (poMember[0] == 'E'):\r\n                confPair += ('interface %s\\n' % poMember)\r\n                confPair += ('   description \"%s\"\\n' % sName)\r\n                confPair += ('!\\n')\r\n            for poMember in poInfo['Port-Channel%d' % poIndex]['inactivePorts']: # ... and also for inactive members\r\n              if (poMember[0] == 'E'):\r\n                confPair += ('interface %s\\n' % poMember)\r\n                confPair += ('   description \"%s\"\\n' % sName)\r\n                confPair += ('!\\n')\r\n            poIndex += 1\r\n            if not (poIndex < poStart+PO_MAX): # If we have more server names than port channels -- stop here\r\n              break\r\n      \r\n      try:\r\n        server.cvpService.addConfiglet (configlet_name, confPair)\r\n        cfg = server.cvpService.getConfigletByName (configlet_name)\r\n        print ('! Configlet %s created' % configlet_name)\r\n      except Exception as err:\r\n        print '! ERROR: Not able to add configlet %s! (%s)' % (configlet_name, err)\r\n        return\r\n\r\n      try:\r\n        server.cvpService.applyConfigletToDevice (dev.ipAddress, dev.fqdn, mac, [configlet_name], [cfg['key']], [], [])\r\n        print ('! Configlet %s assigned' % configlet_name)\r\n        print '! ======================='\r\n      except Exception as err:\r\n        print '! ERROR: Not able to assign configlet %s! (%s)' % (configlet_name, err)\r\n        return\r\n      \r\n    else:\r\n      print '! ERROR: Communication issues with configlet %s! (%s)' % (configlet_name, err)\r\n      return\r\n\r\nmain()\r\n\r\n","key":null}}}