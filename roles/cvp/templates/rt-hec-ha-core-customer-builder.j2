{"name":"rt-hec-ha-core-customer-builder","data":{"formList":[{"fieldId":"action","fieldLabel":"Action","type":"Radio button","value":"add,remove,connect NGDR,connect LRDR,disconnect NGDR,disconnect LRDR","depends":"","validation":{"mandatory":true},"dataValidation":"","helpText":"Add, Remove Customer configuration to\/from HA Core routers or Connect existing local customer with a NGDR or LRDR customer","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":0,"key":"fieldId_42037_36345892914671801","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"customerID","fieldLabel":"Customer number in local DC (e.g. 82)","type":"Text box","value":"","depends":"","validation":{"mandatory":true},"dataValidation":"[0-9][0-9]?[0-9]?","helpText":"Insert 3 digit Customer ID for local DC","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":1,"key":"fieldId_42038_36345892914689140","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"customerName","fieldLabel":"Customer ID\/abbreviation (e.g. XYZ)","type":"Text box","value":"","depends":"","validation":{"mandatory":true},"dataValidation":"","helpText":"Customer Name","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":2,"key":"fieldId_42039_36345892914690295","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"individual","fieldLabel":"Specify Gateway IP and individual IPs (if no the first 5 IPs in the network will be used):","type":"Radio button","value":"no,yes","depends":"action:add","validation":{"mandatory":true},"dataValidation":"","helpText":"This option should be activated if you want to assign specific IP for Gateway and individual IPs for the customer network","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":3,"key":"field_15_1581330142729","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"network","fieldLabel":"Customer network with mask (e.g. 192.168.100.0\/23)","type":"Text box","value":"","depends":"individual:no","validation":{"mandatory":true},"dataValidation":"^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\/([1-9]|[1-2][0-9]|3[0-2])$","helpText":"Customer network with mask","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":4,"key":"field_14_1581329554837","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"customerGwIp","fieldLabel":"Customer network Gateway IP","type":"IP address","value":"","depends":"individual:yes","validation":{"mandatory":true},"dataValidation":"","helpText":"Gateway IP address of this Customer network in this local DC","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":5,"key":"fieldId_42040_36345892914691105","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"customerMask","fieldLabel":"Customer subnet bits (CIDR, e.g. 23)","type":"Text box","value":"","depends":"individual:yes","validation":{"mandatory":true},"dataValidation":"([1-9]|[1-2][0-9]|3[0-2])","helpText":"Subnet bits","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":6,"key":"fieldId_42041_36345892914691903","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"customerHa01aIP","fieldLabel":"Individual IP rt-hec10-ha-core-01a","type":"IP address","value":"","depends":"individual:yes","validation":{"mandatory":true},"dataValidation":"","helpText":"Individual IP for rt-hec10-ha-core-01a in this Customer network","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":7,"key":"field_9_1576565151668","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"customerHa01bIP","fieldLabel":"Individual IP rt-hec10-ha-core-01b","type":"IP address","value":"","depends":"individual:yes","validation":{"mandatory":true},"dataValidation":"","helpText":"Individual IP for rt-hec10-ha-core-01b in this Customer network","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":8,"key":"field_10_1576565158277","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"customerHa01cIP","fieldLabel":"Individual IP rt-hec10-ha-core-01c","type":"IP address","value":"","depends":"individual:yes","validation":{"mandatory":true},"dataValidation":"","helpText":"Individual IP for rt-hec10-ha-core-01c in this Customer network","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":9,"key":"field_11_1576565161473","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"customerHa01dIP","fieldLabel":"Individual IP rt-hec10-ha-core-01d","type":"IP address","value":"","depends":"individual:yes","validation":{"mandatory":true},"dataValidation":"","helpText":"Individual IP for rt-hec10-ha-core-01d in this Customer network","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":10,"key":"field_12_1576565164984","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"remote_available","fieldLabel":"NGDR site available","type":"Radio button","value":"yes,no","depends":"action:add","validation":{"mandatory":true},"dataValidation":"","helpText":"Is this customer available in Remote DC (NGDR)?","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":11,"key":"fieldId_42042_36345892914692802","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"remoteCustomerID","fieldLabel":"Customer number in NGDR DC (e.g. 82)","type":"Text box","value":"","depends":"remote_available:yes","validation":{"mandatory":true},"dataValidation":"[0-9][0-9]?[0-9]?","helpText":"Insert 3 digit Customer ID in NGDR DC","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":12,"key":"fieldId_42043_36345892914698738","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"remoteCustomerID_connect","fieldLabel":"Customer number in NGDR DC (e.g. 82)","type":"Text box","value":"","depends":"action:connect NGDR","validation":{"mandatory":true},"dataValidation":"[0-9][0-9]?[0-9]?","helpText":"Insert 3 digit Customer ID from NGDR DC to connect to","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":13,"key":"fieldId_42044_36345892914699570","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"remoteCustomerID_disconnect","fieldLabel":"Customer number in NGDR DC (e.g. 82)","type":"Text box","value":"","depends":"action:disconnect NGDR","validation":{"mandatory":true},"dataValidation":"[0-9][0-9]?[0-9]?","helpText":"Insert 3 digit Customer ID from NGDR DC to disconnect from","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":14,"key":"field_18_1597648230717","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"lrdr_available","fieldLabel":"LRDR site available","type":"Radio button","value":"yes,no","depends":"action:add","validation":{"mandatory":true},"dataValidation":"","helpText":"Is this customer available in LongRange DR DC (LRDR)?","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":15,"key":"field_15_1596807197790","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"lrdrCustomerID","fieldLabel":"Customer number in LRDR DC (e.g. 82)","type":"Text box","value":"","depends":"lrdr_available:yes","validation":{"mandatory":true},"dataValidation":"[0-9][0-9]?[0-9]?","helpText":"Insert 3 digit Customer ID in LongRange DR DC","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":16,"key":"field_16_1596807318281","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"lrdrCustomerID_connect","fieldLabel":"Customer number in LRDR DC (e.g. 82)","type":"Text box","value":"","depends":"action:connect LRDR","validation":{"mandatory":true},"dataValidation":"[0-9][0-9]?[0-9]?","helpText":"Insert 3 digit Customer ID in LongRange DR DC","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":17,"key":"field_17_1596808271420","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"lrdrCustomerID_disconnect","fieldLabel":"Customer number in LRDR DC (e.g. 82)","type":"Text box","value":"","depends":"action:disconnect LRDR","validation":{"mandatory":true},"dataValidation":"[0-9][0-9]?[0-9]?","helpText":"Insert 3 digit Customer ID from LRDR DC to disconnect from","configletBuilderId":"configletBuilderMapper_f2890e52-8266-4c82-bfff-16cb1f57475c","orderId":18,"key":"field_19_1597652524535","dataValidationErrorExist":false,"previewValue":""}],"type":"BUILDER_WITHOUT_DRAFT","main_script":{"data":"import jsonrpclib\r\nfrom cvplibrary import CVPGlobalVariables, GlobalVariableNames\r\nfrom cvplibrary import RestClient\r\nfrom cvplibrary import Form\r\nimport sys\r\nimport json\r\nimport cvp\r\nimport cvpServices\r\nimport errorCodes\r\nimport socket\r\nimport time\r\nimport ssl\r\nimport os\r\nfrom socket import inet_ntoa\r\nfrom struct import pack\r\nimport ipaddress\r\n\r\n\r\nLOCAL_DC_ID   = '{{ hec.hec_nr }}'\r\nNGDR_AS       = '641{{ hec.hec_nr }}.10999'\r\nVRF_PREFIX    = '3'\r\nVLAN_PREFIX   = '2'\r\nREMOTE_DC_ID  = '{% if hec.ngdr_overlay is defined %}{{ hec.ngdr_overlay.remote_hec_nr }}{% else %}00{% endif %}'\r\nLRDR_DC_ID  = '{% if hec.lrdr_overlay is defined %}{{ hec.lrdr_overlay.remote_hec_nr }}{% else %}00{% endif %}'\r\nconfiglet_name = 'rt-hec-ha.customer' \r\nconfiglet_name_ha01a = 'rt-hec-ha-core-01a.customer' \r\nconfiglet_name_ha01b = 'rt-hec-ha-core-01b.customer'\r\nconfiglet_name_ha01c = 'rt-hec-ha-core-01c.customer'\r\nconfiglet_name_ha01d = 'rt-hec-ha-core-01d.customer'\r\nSTAIC_ROUTES = [{'network':'100.127.0.0', 'mask':'255.255.0.0'}, {'network':'147.204.0.0', 'mask':'255.255.0.0'}, {'network':'169.145.0.0', 'mask':'255.255.0.0'}]\r\n\r\n\r\n\r\n\r\n# ================================================================================\r\n# Providing an -unverififed- default context.\r\n# ================================================================================\r\n\r\nif ((sys.version_info.major == 3) or\r\n    (sys.version_info.major == 2 and sys.version_info.minor == 7 and sys.version_info.micro >= 5)):\r\n    ssl._create_default_https_context = ssl._create_unverified_context\r\n# ================================================================================\r\n\r\ndef getThreeDigitID(id_str):\r\n  id_int = int(id_str)\r\n  if id_int < 10:\r\n    return \"00\" + str(id_int)\r\n  elif id_int < 100:\r\n    return \"0\" + str(id_int)\r\n  else:\r\n    return str(id_int)\r\n\r\n# ================================================================================\r\n# Method to return config lines which should stay in configlet after a customer is removed\r\n# ================================================================================\r\ndef getIndividualAfterRemove(cfg, customerID, customerName):\r\n  custStartFound = False\r\n  custEndFound = False\r\n  removedConfig = \"\"\r\n  stayingConfig = \"\"    \r\n  for line in cfg.get('config').splitlines(True):\r\n        # Find start of configuration of this customer\r\n        if line.startswith('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)):\r\n          custStartFound = True\r\n        \r\n        if custStartFound == True and custEndFound == False:\r\n          removedConfig += line\r\n        else:\r\n          stayingConfig += line\r\n        \r\n        # Find end of configuration of this customer\r\n        if line.startswith('! 0%s_%s_End###############################################################\\n' % (customerID, customerName)):\r\n          custEndFound = True\r\n          \r\n  return stayingConfig\r\n\r\n# =======================================================\r\n# Create missing configlets \r\n# =======================================================\r\ndef createMissingConfiglets(server, configlet_name):  \r\n  try:\r\n\t  server.cvpService.addConfiglet(configlet_name, \"\")\r\n\t  print ('! INFO: Configlet %s created.' % configlet_name)\r\n\t  try:\r\n\t    cfg = server.cvpService.getConfigletByName (configlet_name)\r\n\t    return cfg\r\n\t  except Exception as err:\r\n\t    print \"! ERROR: Required configlet %s could not be fetched after it was created. Try again. (%s)\" % (configlet_name, err)\r\n\t    return\r\n  except cvp.cvpServices.CvpError as err:\r\n    print ('! ERROR: Configlet %s could not be created' % configlet_name)\r\n    return\r\n  \r\n  # =======================================================\r\n  \r\ndef main():\r\n  \r\n  # ================================================================================\r\n  # This script adds all needed Customer configuration to the HA routers.\r\n  # ================================================================================\r\n  \r\n  # Get values from the interactive form:\r\n  customerID = getThreeDigitID(str(Form.getFieldById('customerID').getValue()))\r\n  customerName = str(Form.getFieldById('customerName').getValue())\r\n  action = str(Form.getFieldById('action').getValue())\r\n  individual = str(Form.getFieldById('individual').getValue())\r\n  remoteAvailable = str(Form.getFieldById('remote_available').getValue())\r\n  lrdrAvailable = str(Form.getFieldById('lrdr_available').getValue())\r\n  if remoteAvailable == \"yes\":\r\n    remoteCustomerID = getThreeDigitID((Form.getFieldById('remoteCustomerID').getValue()))\r\n  if lrdrAvailable == \"yes\":\r\n    lrdrCustomerID = getThreeDigitID((Form.getFieldById('lrdrCustomerID').getValue()))\r\n  if action == \"connect NGDR\":  \r\n    remoteCustomerID_connect = getThreeDigitID((Form.getFieldById('remoteCustomerID_connect').getValue()))\r\n  if action == \"disconnect NGDR\":  \r\n    remoteCustomerID_disconnect = getThreeDigitID((Form.getFieldById('remoteCustomerID_disconnect').getValue()))\r\n  if action == \"disconnect LRDR\":  \r\n    lrdrCustomerID_disconnect = getThreeDigitID((Form.getFieldById('lrdrCustomerID_disconnect').getValue()))\r\n  if action == \"connect LRDR\":  \r\n    lrdrCustomerID_connect = getThreeDigitID((Form.getFieldById('lrdrCustomerID_connect').getValue()))\r\n  if individual == \"yes\":\r\n    customerGwIp = str(Form.getFieldById('customerGwIp').getValue())\r\n    customerMask = str(Form.getFieldById('customerMask').getValue())\r\n    customerHa01aIP = str(Form.getFieldById('customerHa01aIP').getValue())\r\n    customerHa01bIP = str(Form.getFieldById('customerHa01bIP').getValue())\r\n    customerHa01cIP = str(Form.getFieldById('customerHa01cIP').getValue())\r\n    customerHa01dIP = str(Form.getFieldById('customerHa01dIP').getValue())\r\n    # Verify individual IPs are not the same ones\r\n    if (customerGwIp == customerHa01aIP) or (customerGwIp == customerHa01bIP) or (customerGwIp == customerHa01cIP) or (customerGwIp == customerHa01dIP):\r\n      print \"! ERROR: There was an overlap between the Gateway IP and one of the individual IPs!\"\r\n      return \r\n    elif (customerHa01aIP == customerHa01bIP) or (customerHa01aIP == customerHa01cIP) or (customerHa01aIP == customerHa01dIP):\r\n      print \"! ERROR: There was an overlap between the first individual IP and one of the other individual IPs!\" \r\n      return \r\n    elif (customerHa01bIP == customerHa01cIP) or (customerHa01bIP == customerHa01dIP):\r\n      print \"! ERROR: There was an overlap between the second individual IP and one of the other individual IPs!\"\r\n      return\r\n    elif (customerHa01cIP == customerHa01dIP):\r\n      print \"! ERROR: There was an overlap between the third individual IP and one of the other individual IPs!\"\r\n      return\r\n  elif individual == \"no\":\r\n    network = str(Form.getFieldById('network').getValue())\r\n  \r\n  \r\n  \r\n  \r\n  # =======================================================\r\n  # Start the CVP session\r\n  # =======================================================\r\n  \r\n  cvpuser   = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_USERNAME)\r\n  cvppasswd = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_PASSWORD)\r\n  \r\n  server = cvp.Cvp('localhost')\r\n  try:\r\n    server.authenticate(cvpuser, cvppasswd)\r\n  except Exception as err:\r\n    print \"! ERROR: Unable to authenticate to the CVP server as user: %s (%s)\" % (cvpuser, err)\r\n    # raise cvpServices.CvpError (errorCodes.INVALID_ARGUMENT, \"Something went wrong\")\r\n    return\r\n  \r\n  \r\n  # ================================================================\r\n  # Try to get  NGDR configlets and append the new Customer configuration\r\n  # ================================================================\r\n  \r\n  try:\r\n    cfg = server.cvpService.getConfigletByName (configlet_name)\r\n  except Exception as err:\r\n    print \"! INFO: Required configlet %s does not exist, trying to create and fetch it! (%s)\" % (configlet_name, err)\r\n    # Try to create the missing configlet and get it\r\n    cfg = createMissingConfiglets(server, configlet_name)\r\n    pass\r\n  \r\n  try:\r\n    cfg_ha01a = server.cvpService.getConfigletByName (configlet_name_ha01a)\r\n  except Exception as err:\r\n    print \"! INFO: Required configlet %s does not exist, trying to create and fetch it! (%s)\" % (configlet_name_ha01a, err)\r\n    # Try to create the missing configlet and get it\r\n    cfg_ha01a = createMissingConfiglets(server, configlet_name_ha01a)\r\n    pass\r\n  \r\n  try:\r\n    cfg_ha01b = server.cvpService.getConfigletByName (configlet_name_ha01b)\r\n  except Exception as err:\r\n    print \"! INFO: Required configlet %s does not exist, trying to create and fetch it! (%s)\" % (configlet_name_ha01b, err)\r\n    # Try to create the missing configlet and get it\r\n    cfg_ha01b = createMissingConfiglets(server, configlet_name_ha01b)\r\n    pass\r\n  \r\n  try:\r\n    cfg_ha01c = server.cvpService.getConfigletByName (configlet_name_ha01c)\r\n  except Exception as err:\r\n    print \"! INFO: Required configlet %s does not exist, trying to create and fetch it! (%s)\" % (configlet_name_ha01c, err)\r\n    # Try to create the missing configlet and get it\r\n    cfg_ha01c = createMissingConfiglets(server, configlet_name_ha01c)\r\n    pass\r\n  \r\n  try:\r\n    cfg_ha01d = server.cvpService.getConfigletByName (configlet_name_ha01d)\r\n  except Exception as err:\r\n    print \"! INFO: Required configlet %s does not exist, trying to create and fetch it! (%s)\" % (configlet_name_ha01d, err)\r\n    # Try to create the missing configlet and get it\r\n    cfg_ha01d = createMissingConfiglets(server, configlet_name_ha01d)\r\n    pass\r\n\r\n\r\n  \r\n  if action == \"add\":\r\n    if individual == \"yes\":\r\n      net = ipaddress.IPv4Network(unicode(customerGwIp) + '\/' + unicode(customerMask), False)\r\n      lastIPinNet = str(list(net.hosts()).pop())\r\n    elif individual == \"no\":\r\n      net = ipaddress.IPv4Network(unicode(network), False)\r\n      lastIPinNet = str(list(net.hosts()).pop())\r\n      customerGwIp = str(list(net.hosts())[0])\r\n      customerHa01aIP = str(list(net.hosts())[1])\r\n      customerHa01bIP = str(list(net.hosts())[2])\r\n      customerHa01cIP = str(list(net.hosts())[3])\r\n      customerHa01dIP = str(list(net.hosts())[4])\r\n      customerMask = network.split(\"\/\")[1]\r\n  \r\n    # =======================================================\r\n    # Prepare configuration for customer to be added\r\n    # =======================================================  \r\n    config = \"\"\r\n    config += ('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName))\r\n    config += ('! ### Customer CUSTOMER_0%s: START\\n' % customerID)\r\n    config += ('! #####################################################################\\n')\r\n    config += ('! \\n')\r\n    config += ('vlan %s%s\\n' % (VLAN_PREFIX ,customerID))\r\n    config += ('   name HEC%s-CUSTOMER_0%s-%s\\n' % (LOCAL_DC_ID, customerID, customerName))\r\n    config += ('! \\n')\r\n    config += ('{{eos_cmd.c_vrf_defintion}} CUSTOMER_0%s\\n' % customerID)\r\n    config += ('   description HEC%s-CUSTOMER_0%s-%s\\n' % (LOCAL_DC_ID, customerID, customerName))\r\n    config += ('! \\n')\r\n    config += ('ip routing vrf CUSTOMER_0%s\\n' % customerID)\r\n    config += ('! \\n')\r\n    config += ('interface Vlan%s%s\\n' % (VLAN_PREFIX ,customerID))\r\n    config += ('   no autostate\\n')\r\n    config += ('   {{eos_cmd.c_vrf_forwarding}} CUSTOMER_0%s\\n' % customerID)\r\n#    config += ('   ip address virtual %s\/%s\\n' % (customerGwIp, customerMask))\r\n    config += ('   ip virtual-router address %s\\n' % (customerGwIp))\r\n    config += ('! \\n')\r\n    config += ('interface Vxlan1 \\n')\r\n    config += ('   vxlan vrf CUSTOMER_0%s vni %s%s%s0\\n' % (customerID, VRF_PREFIX, LOCAL_DC_ID, customerID))\r\n    config += ('! \\n')\r\n    config += ('router bgp %s\\n' % NGDR_AS)\r\n    config += ('   vrf CUSTOMER_0%s\\n' % customerID)\r\n    config += ('      rd %s:%s%s\\n' % (str(int(LOCAL_DC_ID)), VLAN_PREFIX, customerID))\r\n    if remoteAvailable == \"yes\":\r\n      config += ('      route-target import evpn %s:%s%s\\n' % (str(int(REMOTE_DC_ID)), VLAN_PREFIX, remoteCustomerID))\r\n    if lrdrAvailable == \"yes\":\r\n      config += ('      route-target import evpn %s:%s%s\\n' % (str(int(LRDR_DC_ID)), VLAN_PREFIX, lrdrCustomerID))\r\n    config += ('      route-target import evpn %s:%s%s\\n' % (str(int(LOCAL_DC_ID)), VRF_PREFIX, customerID))\r\n    config += ('      route-target import evpn %s:%s%s\\n' % (str(int(LOCAL_DC_ID)), VLAN_PREFIX, customerID))\r\n    config += ('      route-target export evpn %s:%s%s\\n' % (str(int(LOCAL_DC_ID)), VLAN_PREFIX, customerID))\r\n    config += ('      redistribute connected\\n')\r\n    config += ('      ! \\n')\r\n    config += ('   ! \\n')\r\n    config += ('! \\n')\r\n    for route in STAIC_ROUTES:\r\n      config += ('ip route vrf CUSTOMER_0%s %s %s %s\\n' % (customerID, route.get('network'), route.get('mask'), lastIPinNet))\r\n    config += ('! \\n')\r\n    config += ('! #####################################################################\\n')\r\n    config += ('! ### Customer CUSTOMER_0%s: END\\n' % customerID)\r\n    config += ('! 0%s_%s_End###############################################################\\n' % (customerID, customerName))\r\n  \r\n    # =======================================================\r\n    # Prepare individual config parts\r\n    # =======================================================  \r\n    config_ha01a = \"\"\r\n    config_ha01a += ('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName))\r\n    config_ha01a += ('! ### Customer CUSTOMER_0%s: START\\n' % customerID)\r\n    config_ha01a += ('! #####################################################################\\n')\r\n    config_ha01a += ('! \\n')\r\n    config_ha01a += ('interface Vlan%s%s\\n' % (VLAN_PREFIX ,customerID))\r\n    config_ha01a += ('   ip address %s\/%s\\n' % (customerHa01aIP, customerMask))\r\n    config_ha01a += ('! \\n')\r\n    config_ha01a += ('! #####################################################################\\n')\r\n    config_ha01a += ('! ### Customer CUSTOMER_0%s: END\\n' % customerID)\r\n    config_ha01a += ('! 0%s_%s_End###############################################################\\n' % (customerID, customerName))\r\n    \r\n    config_ha01b = \"\"\r\n    config_ha01b += ('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName))\r\n    config_ha01b += ('! ### Customer CUSTOMER_0%s: START\\n' % customerID)\r\n    config_ha01b += ('! #####################################################################\\n')\r\n    config_ha01b += ('! \\n')\r\n    config_ha01b += ('interface Vlan%s%s\\n' % (VLAN_PREFIX ,customerID))\r\n    config_ha01b += ('   ip address %s\/%s\\n' % (customerHa01bIP, customerMask))\r\n    config_ha01b += ('! \\n')\r\n    config_ha01b += ('! #####################################################################\\n')\r\n    config_ha01b += ('! ### Customer CUSTOMER_0%s: END\\n' % customerID)\r\n    config_ha01b += ('! 0%s_%s_End###############################################################\\n' % (customerID, customerName))\r\n    \r\n    config_ha01c = \"\"\r\n    config_ha01c += ('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName))\r\n    config_ha01c += ('! ### Customer CUSTOMER_0%s: START\\n' % customerID)\r\n    config_ha01c += ('! #####################################################################\\n')\r\n    config_ha01c += ('! \\n')\r\n    config_ha01c += ('interface Vlan%s%s\\n' % (VLAN_PREFIX ,customerID))\r\n    config_ha01c += ('   ip address %s\/%s\\n' % (customerHa01cIP, customerMask))\r\n    config_ha01c += ('! \\n')\r\n    config_ha01c += ('! #####################################################################\\n')\r\n    config_ha01c += ('! ### Customer CUSTOMER_0%s: END\\n' % customerID)\r\n    config_ha01c += ('! 0%s_%s_End###############################################################\\n' % (customerID, customerName))\r\n    \r\n    config_ha01d = \"\"\r\n    config_ha01d += ('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName))\r\n    config_ha01d += ('! ### Customer CUSTOMER_0%s: START\\n' % customerID)\r\n    config_ha01d += ('! #####################################################################\\n')\r\n    config_ha01d += ('! \\n')\r\n    config_ha01d += ('interface Vlan%s%s\\n' % (VLAN_PREFIX ,customerID))\r\n    config_ha01d += ('   ip address %s\/%s\\n' % (customerHa01dIP, customerMask))\r\n    config_ha01d += ('! \\n')\r\n    config_ha01d += ('! #####################################################################\\n')\r\n    config_ha01d += ('! ### Customer CUSTOMER_0%s: END\\n' % customerID)\r\n    config_ha01d += ('! 0%s_%s_End###############################################################\\n' % (customerID, customerName))\r\n  \r\n  \r\n    # ================================================================\r\n    # Check if this local Customer, Remote Customer or LRDR Customer are already configured and only if not configure it\r\n    # ================================================================\r\n    if remoteAvailable == \"yes\":\r\n      remoteIdVerificationString = 'route-target import evpn %s:%s%s\\n' % (str(int(REMOTE_DC_ID)), VLAN_PREFIX, remoteCustomerID)\r\n      if remoteIdVerificationString in cfg.get('config'):\r\n        print \"! ERROR: Given Remote Customer number %s already configured\" % remoteCustomerID\r\n        return\r\n      \r\n    if lrdrAvailable == \"yes\":\r\n      lrdrIdVerificationString = 'route-target import evpn %s:%s%s\\n' % (str(int(LRDR_DC_ID)), VLAN_PREFIX, lrdrCustomerID)\r\n      if lrdrIdVerificationString in cfg.get('config'):\r\n        print \"! ERROR: Given LRDR Customer number %s already configured\" % lrdrCustomerID\r\n        return\r\n    \r\n    verificationString = 'CUSTOMER_0%s: START\\n' % customerID\r\n    if verificationString in cfg.get('config'):\r\n      print \"! ERROR: Local Customer with number %s already configured\" % customerID\r\n      return\r\n    else:\r\n      new_config = cfg.get('config') + \"\\n!\\n\" + (config)\r\n      new_config_ha01a = cfg_ha01a.get('config') + \"\\n!\\n\" + (config_ha01a)\r\n      new_config_ha01b = cfg_ha01b.get('config') + \"\\n!\\n\" + (config_ha01b)\r\n      new_config_ha01c = cfg_ha01c.get('config') + \"\\n!\\n\" + (config_ha01c)\r\n      new_config_ha01d = cfg_ha01d.get('config') + \"\\n!\\n\" + (config_ha01d)\r\n      try:\r\n        server.cvpService.updateConfiglet(cfg.get('name'), new_config, cfg.get('key'))\r\n        server.cvpService.updateConfiglet(cfg_ha01a.get('name'), new_config_ha01a, cfg_ha01a.get('key'))\r\n        server.cvpService.updateConfiglet(cfg_ha01b.get('name'), new_config_ha01b, cfg_ha01b.get('key'))\r\n        server.cvpService.updateConfiglet(cfg_ha01c.get('name'), new_config_ha01c, cfg_ha01c.get('key'))\r\n        server.cvpService.updateConfiglet(cfg_ha01d.get('name'), new_config_ha01d, cfg_ha01d.get('key'))\r\n        print \"! SUCCESS: Customer with number %s added to NGDR customer configlet\" % customerID\r\n        \r\n        print \"! Added shared configuration (individual configuration added is not shown here):\\n\"\r\n        print config\r\n      \r\n        print \"\\n\\n\\n\"\r\n      \r\n        print \"! Full shared HA Core configlet (individual configuration added is not shown here):\\n\"\r\n        print new_config\r\n        \r\n      except Exception as err:\r\n        print \"! ERROR: Could not add Customer ID %s configuration to HA Core configlet! (%s) \" % (customerID, err)\r\n        return\r\n      \r\n      \r\n  elif action == \"remove\": \r\n    # ================================================================\r\n    # Remove configuration for a Customer \r\n    # ================================================================\r\n    verificationString = '! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)\r\n    if verificationString not in cfg.get('config'):\r\n      print \"! ERROR: Customer with number %s and name %s not found and therefore can't be removed.\" % (customerID, customerName)\r\n      return\r\n    else:\r\n      custStartFound = False\r\n      custEndFound = False\r\n      removedConfig = \"\"\r\n      stayingConfig = \"\"\r\n      \r\n      for line in cfg.get('config').splitlines(True):\r\n        # Find start of configuration of this customer\r\n        if line.startswith('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)):\r\n          custStartFound = True\r\n        \r\n        if custStartFound == True and custEndFound == False:\r\n          removedConfig += line\r\n        else:\r\n          stayingConfig += line\r\n        \r\n        # Find end of configuration of this customer\r\n        if line.startswith('! 0%s_%s_End###############################################################\\n' % (customerID, customerName)):\r\n          custEndFound = True\r\n      \r\n      ### For individual configlets ###\r\n      stayingConfig_01a = getIndividualAfterRemove(cfg_ha01a, customerID, customerName)\r\n      stayingConfig_01b = getIndividualAfterRemove(cfg_ha01b, customerID, customerName)\r\n      stayingConfig_01c = getIndividualAfterRemove(cfg_ha01c, customerID, customerName)\r\n      stayingConfig_01d = getIndividualAfterRemove(cfg_ha01d, customerID, customerName)\r\n      \r\n          \r\n      \r\n      try:\r\n        server.cvpService.updateConfiglet(cfg.get('name'), stayingConfig, cfg.get('key'))\r\n        server.cvpService.updateConfiglet(cfg_ha01a.get('name'), stayingConfig_01a, cfg_ha01a.get('key'))\r\n        server.cvpService.updateConfiglet(cfg_ha01b.get('name'), stayingConfig_01b, cfg_ha01b.get('key'))\r\n        server.cvpService.updateConfiglet(cfg_ha01c.get('name'), stayingConfig_01c, cfg_ha01c.get('key'))\r\n        server.cvpService.updateConfiglet(cfg_ha01d.get('name'), stayingConfig_01d, cfg_ha01d.get('key'))\r\n        print \"! SUCCESS: Customer with number %s and name %s removed from HA Core customer configlets\" % (customerID, customerName)\r\n        \r\n        print \"! Removed shared configuration (individual configuration removed is not shown here):\\n\"\r\n        print removedConfig\r\n      \r\n        print \"\\n\\n\\n\"\r\n      \r\n        print \"! Staying shared HA Core configuration (individual configuration removed is not shown here):\\n\"\r\n        print stayingConfig\r\n        \r\n      except Exception as err:\r\n        print \"! ERROR: Could not remove Customer with number %s and name %s configuration from NGDR configlet! (%s) \" % (customerID, customerName, err)\r\n        return\r\n      \r\n  \r\n  \r\n  elif action == \"connect NGDR\": \r\n    # ================================================================\r\n    # Connect existing customer with customer in remote DC \r\n    # ================================================================\r\n    \r\n    remoteIdVerificationString = 'route-target import evpn %s:%s%s\\n' % (str(int(REMOTE_DC_ID)), VLAN_PREFIX, remoteCustomerID_connect)\r\n    if remoteIdVerificationString in cfg.get('config'):\r\n      print \"! ERROR: Given NGDR Customer number %s already configured\" % remoteCustomerID_connect\r\n      return\r\n    \r\n    verificationString = '! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)\r\n    if verificationString not in cfg.get('config'):\r\n      print \"! ERROR: Local Customer with number %s and name %s not found and therefore can't be connected to NGDR customer number.\" % (customerID, customerName)\r\n      return\r\n    else:\r\n      custStartFound = False\r\n      custRdFound = False\r\n      removedConfig = \"\"\r\n      stayingConfig = \"\"\r\n      \r\n      for line in cfg.get('config').splitlines(True):\r\n        # Find start of configuration for this customer\r\n        if line.startswith('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)):\r\n          custStartFound = True\r\n        \r\n        if custStartFound == True:\r\n          # Find start of route distinguisher line for this customer\r\n          if line.startswith('      rd %s:%s%s\\n' % (str(int(LOCAL_DC_ID)), VLAN_PREFIX, customerID)):\r\n            custRdFound = True\r\n        \r\n        # Keep all lines of the configlet\r\n        stayingConfig += line\r\n        \r\n        # Add the route-import for remote customer ID to connect to \r\n        if custStartFound == True and custRdFound == True:\r\n          stayingConfig += ('      route-target import evpn %s:%s%s\\n' % (str(int(REMOTE_DC_ID)), VLAN_PREFIX, remoteCustomerID_connect))\r\n          custRdFound = False\r\n          custStartFound = False\r\n          \r\n      \r\n      try:\r\n        server.cvpService.updateConfiglet(cfg.get('name'), stayingConfig, cfg.get('key'))\r\n        print \"! SUCCESS: Customer with number %s and name %s is now connected to NGDR customer with number %s\" % (customerID, customerName, remoteCustomerID_connect)\r\n        \r\n        print \"! Full shared configuration:\\n\"\r\n        print stayingConfig\r\n        \r\n      except Exception as err:\r\n        print \"! ERROR: Could not connect Customer with number %s and name %s to NGDR customer with number %s ! (%s) \" % (customerID, customerName, remoteCustomerID_connect, err)\r\n        return\r\n\r\n\r\n  elif action == \"connect LRDR\": \r\n    # ================================================================\r\n    # Connect existing customer with customer in LRDR DC \r\n    # ================================================================\r\n    \r\n    lrdrIdVerificationString = 'route-target import evpn %s:%s%s\\n' % (str(int(LRDR_DC_ID)), VLAN_PREFIX, lrdrCustomerID_connect)\r\n    if lrdrIdVerificationString in cfg.get('config'):\r\n      print \"! ERROR: Given LRDR Customer number %s already configured\" % lrdrCustomerID_connect\r\n      return\r\n    \r\n    verificationString = '! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)\r\n    if verificationString not in cfg.get('config'):\r\n      print \"! ERROR: Local Customer with number %s and name %s not found and therefore can't be connected to LRDR customer number.\" % (customerID, customerName)\r\n      return\r\n    else:\r\n      custStartFound = False\r\n      custRdFound = False\r\n      removedConfig = \"\"\r\n      stayingConfig = \"\"\r\n      \r\n      for line in cfg.get('config').splitlines(True):\r\n        # Find start of configuration for this customer\r\n        if line.startswith('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)):\r\n          custStartFound = True\r\n        \r\n        if custStartFound == True:\r\n          # Find start of route distinguisher line for this customer\r\n          if line.startswith('      rd %s:%s%s\\n' % (str(int(LOCAL_DC_ID)), VLAN_PREFIX, customerID)):\r\n            custRdFound = True\r\n        \r\n        # Keep all lines of the configlet\r\n        stayingConfig += line\r\n        \r\n        # Add the route-import for remote customer ID to connect to \r\n        if custStartFound == True and custRdFound == True:\r\n          stayingConfig += ('      route-target import evpn %s:%s%s\\n' % (str(int(LRDR_DC_ID)), VLAN_PREFIX, lrdrCustomerID_connect))\r\n          custRdFound = False\r\n          custStartFound = False\r\n          \r\n      \r\n      try:\r\n        server.cvpService.updateConfiglet(cfg.get('name'), stayingConfig, cfg.get('key'))\r\n        print \"! SUCCESS: Customer with number %s and name %s is now connected to LRDR customer with number %s\" % (customerID, customerName, lrdrCustomerID_connect)\r\n        \r\n        print \"! Full shared configuration:\\n\"\r\n        print stayingConfig\r\n        \r\n      except Exception as err:\r\n        print \"! ERROR: Could not connect Customer with number %s and name %s to LRDR customer with number %s ! (%s) \" % (customerID, customerName, lrdrCustomerID_connect, err)\r\n        return\r\n\r\n\r\n  elif action == \"disconnect NGDR\": \r\n    # ================================================================\r\n    # Disconnecting existing customer with customer in NGDR DC \r\n    # ================================================================\r\n    \r\n    verificationString = '! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)\r\n    if verificationString not in cfg.get('config'):\r\n      print \"! ERROR: Local Customer with number %s and name %s not found and therefore can't be disconnected from NGDR customer number.\" % (customerID, customerName)\r\n      return\r\n    else:\r\n      # Verify if Local customer is connected to NGDR customer\r\n      remoteIdVerificationString = 'route-target import evpn %s:%s%s\\n' % (str(int(REMOTE_DC_ID)), VLAN_PREFIX, remoteCustomerID_disconnect)\r\n      startFound = False\r\n      custConfig = \"\"\r\n      for line in cfg.get('config').splitlines(True):\r\n        if line.startswith('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)):\r\n          startFound = True\r\n          \r\n        if startFound == True:\r\n          custConfig += line\r\n      \r\n        if line.startswith('! 0%s_%s_End###############################################################\\n' % (customerID, customerName)):\r\n          startFound = False\r\n      if remoteIdVerificationString not in custConfig:\r\n        print \"! ERROR: Given local Customer number %s with name %s is not connected to NGDR Customer number %s\" % (customerID, customerName, remoteCustomerID_disconnect)\r\n        return\r\n      \r\n      custStartFound = False\r\n      custRtFound = False\r\n      removedConfig = \"\"\r\n      stayingConfig = \"\"\r\n      \r\n      for line in cfg.get('config').splitlines(True):\r\n        # Find start of configuration for this customer\r\n        if line.startswith('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)):\r\n          custStartFound = True\r\n        \r\n        if custStartFound == True:\r\n          # Find the NGDR route-target line which should be removed\r\n          if remoteIdVerificationString in line:\r\n            custRtFound = True\r\n        \r\n        # Remove the route-import for NGDR customer ID\r\n        if custStartFound == True and custRtFound == True:\r\n          custRtFound = False\r\n          custStartFound = False\r\n        else:  \r\n          # Keep all other lines of the configlet\r\n          stayingConfig += line\r\n      \r\n      try:\r\n        server.cvpService.updateConfiglet(cfg.get('name'), stayingConfig, cfg.get('key'))\r\n        print \"! SUCCESS: Customer with number %s and name %s is now disconnected from NGDR customer with number %s\" % (customerID, customerName, remoteCustomerID_disconnect)\r\n        \r\n        print \"! Full shared configuration:\\n\"\r\n        print stayingConfig\r\n        \r\n      except Exception as err:\r\n        print \"! ERROR: Could not disconnect Customer with number %s and name %s from NGDR customer with number %s ! (%s) \" % (customerID, customerName, remoteCustomerID_disconnect, err)\r\n        return\r\n\r\n\r\n  elif action == \"disconnect LRDR\": \r\n    # ================================================================\r\n    # Disconnecting existing customer with customer in LRDR DC \r\n    # ================================================================\r\n    \r\n    verificationString = '! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)\r\n    if verificationString not in cfg.get('config'):\r\n      print \"! ERROR: Local Customer with number %s and name %s not found and therefore can't be disconnected from LRDR customer number.\" % (customerID, customerName)\r\n      return\r\n    else:\r\n      # Verify if Local customer is connected to LRDR customer\r\n      remoteIdVerificationString = 'route-target import evpn %s:%s%s\\n' % (str(int(LRDR_DC_ID)), VLAN_PREFIX, lrdrCustomerID_disconnect)\r\n      startFound = False\r\n      custConfig = \"\"\r\n      for line in cfg.get('config').splitlines(True):\r\n        if line.startswith('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)):\r\n          startFound = True\r\n          \r\n        if startFound == True:\r\n          custConfig += line\r\n      \r\n        if line.startswith('! 0%s_%s_End###############################################################\\n' % (customerID, customerName)):\r\n          startFound = False\r\n      if remoteIdVerificationString not in custConfig:\r\n        print \"! ERROR: Given local Customer number %s with name %s is not connected to LRDR Customer number %s\" % (customerID, customerName, lrdrCustomerID_disconnect)\r\n        return\r\n      \r\n      custStartFound = False\r\n      custRtFound = False\r\n      removedConfig = \"\"\r\n      stayingConfig = \"\"\r\n      \r\n      for line in cfg.get('config').splitlines(True):\r\n        # Find start of configuration for this customer\r\n        if line.startswith('! 0%s_%s_Start#############################################################\\n' % (customerID, customerName)):\r\n          custStartFound = True\r\n        \r\n        if custStartFound == True:\r\n          # Find the LRDR route-target line which should be removed\r\n          if remoteIdVerificationString in line:\r\n            custRtFound = True\r\n        \r\n        # Remove the route-import for LRDR customer ID\r\n        if custStartFound == True and custRtFound == True:\r\n          custRtFound = False\r\n          custStartFound = False\r\n        else:  \r\n          # Keep all other lines of the configlet\r\n          stayingConfig += line\r\n      \r\n      try:\r\n        server.cvpService.updateConfiglet(cfg.get('name'), stayingConfig, cfg.get('key'))\r\n        print \"! SUCCESS: Customer with number %s and name %s is now disconnected from LRDR customer with number %s\" % (customerID, customerName, lrdrCustomerID_disconnect)\r\n        \r\n        print \"! Full shared configuration:\\n\"\r\n        print stayingConfig\r\n        \r\n      except Exception as err:\r\n        print \"! ERROR: Could not disconnect Customer with number %s and name %s from NGDR customer with number %s ! (%s) \" % (customerID, customerName, lrdrCustomerID_disconnect, err)\r\n        return\r\n\r\nmain()","key":null}}}
