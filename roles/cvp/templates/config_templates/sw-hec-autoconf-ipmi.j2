{"name":"sw-hec-autoconf-ipmi","data":{"formList":[{"fieldId":"snmpContact","fieldLabel":"SNMP contact (format: Equi:console-server:port)","type":"Text box","value":"unknown","depends":"","validation":{"mandatory":false},"dataValidation":"","helpText":"","configletBuilderId":"configletBuilderMapper_7065_873269067001222","orderId":0,"key":"field_1_1541538183215","dataValidationErrorExist":false,"previewValue":""},{"fieldId":"snmpLocation","fieldLabel":"SNMP location","type":"Text box","value":"unknown","depends":"","validation":{"mandatory":false},"dataValidation":"","helpText":"","configletBuilderId":"configletBuilderMapper_7065_873269067001222","orderId":1,"key":"field_2_1541538238713","dataValidationErrorExist":false,"previewValue":""}],"type":"BUILDER_WITHOUT_DRAFT","main_script":{"data":"import jsonrpclib\r\nfrom cvplibrary import CVPGlobalVariables, GlobalVariableNames\r\nfrom cvplibrary import RestClient\r\nfrom cvplibrary import Form\r\nimport sys\r\nimport json\r\nimport cvp\r\nimport cvpServices\r\nimport errorCodes\r\nimport socket\r\nimport ssl\r\n\r\nLOCATION     = 'hec{{ hec.hec_nr }}'\r\nPOD          = 1\r\nCELLTYPE     = {'hvx', 'hvv', 'hana'}\r\nIPMI_UPLINKS = {'49', '50'}\r\nMA_VRF       = 'OOB'\r\nMA_DOMAIN    = '{{ hec.ma_domain }}'\r\nMA_MASK      = {{ hec.oob_mask }}\r\nVL900_VRF    = ''\r\nVL900_DOMAIN = '{{ hec.vl900_domain }}'\r\nVL900_MASK   = {{ hec.vl900_mask }}\r\nleafType     = 'ipmi'\r\n\r\n# ================================================================================\r\n# Providing an -unverififed- default context. We're only using it in ZTP, so no\r\n# security concerns to be raised.\r\n# ================================================================================\r\n\r\nif ((sys.version_info.major == 3) or\r\n    (sys.version_info.major == 2 and sys.version_info.minor == 7 and sys.version_info.micro >= 5)):\r\n    ssl._create_default_https_context = ssl._create_unverified_context\r\n# ================================================================================\r\n\r\n\r\ndef main():\r\n\r\n  # ================================================================================\r\n  # The autoconf-ipmi script automatically creates configlets:\r\n  #   sw-hec{{ hec.hec_nr }}-ipmi-01 =(individual)= auto-generated based on position\r\n  #   of the switch in regard to leaf switches. It discovers where it sees\r\n  #   neighbors of one of the types listed in CELLTYPE, takes the same cell\r\n  #   number, discovers Ma1\/Vlan900 IPs from DNS, and provides the configlet\r\n  # ================================================================================\r\n\r\n  ztp = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_STATE)\r\n  ip  = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_IP)\r\n  mac = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_MAC)\r\n  \r\n  cvpuser   = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_USERNAME)\r\n  cvppasswd = CVPGlobalVariables.getValue(GlobalVariableNames.CVP_PASSWORD)\r\n  user      = cvpuser    # Device access credentials\r\n  passwd    = cvppasswd  # usually equal to CVP access credentials, besides of ZTP mode\r\n  \r\n  # - SNMP contact, normally in format: 'Equi:console-server:port'\r\n  snmpContact  = str(Form.getFieldById('snmpContact').getValue())\r\n  # - SNMP location, normally in format: 'Country-DC-Cage-Row-Rack-Position'\r\n  snmpLocation = str(Form.getFieldById('snmpLocation').getValue())\r\n  \r\n  if ztp == 'true':\r\n      user   = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_USERNAME)\r\n      passwd = CVPGlobalVariables.getValue(GlobalVariableNames.ZTP_PASSWORD)\r\n  \r\n  url    = 'https:\/\/%s:%s@%s\/command-api' % (user, passwd, ip)\r\n  switch = jsonrpclib.Server (url)\r\n  \r\n  # =======================================================\r\n  # Interacting with the switch\r\n  # =======================================================\r\n\r\n  try:\r\n    lldpNeighbors = switch.runCmds (1, ['enable', 'show lldp neighbors'])[1]['lldpNeighbors']\r\n  except Exception as err:\r\n    print '! ERROR: Not able to contact device to get LLDP neighbors: %s (%s)' % (ip, err)\r\n    return\r\n\r\n  leafNr = ''\r\n  config = ''\r\n  \r\n  config = ('snmp-server contact %s\\n' % snmpContact)\r\n  config += ('snmp-server location %s\\n!\\n' % snmpLocation)\r\n  \r\n  for neighbor in lldpNeighbors:\r\n      port = str (neighbor['port'][8:]) # Ignoring leading 'Ethernet' with [8:]\r\n      if (port in IPMI_UPLINKS):\r\n          nghb = str (neighbor['neighborDevice'].split('.')[0]) # 'sw-hec{{ hec.hec_nr }}-hvx-01a'\r\n          nghbType,_,nghbNr = nghb.rpartition ('-')             # sw-hec{{ hec.hec_nr }}-hvx, 01a\r\n          \r\n          _,_,nghbType = nghbType.rpartition ('-')              # sw-hec{{ hec.hec_nr }}, hvx\r\n          \r\n          if (nghbType not in CELLTYPE):\r\n              print ('! ERROR: Cabling mismatch, wrong uplink: %s' % nghb)\r\n              return\r\n\r\n          if (leafNr == ''):\r\n            leafNr  = nghbNr [:-1]\r\n          elif (leafNr != nghbNr [:-1]):\r\n              print ('! ERROR: Cabling mismatch, %s:%s' % (leafNr, nghbNr [:-1]))\r\n              return\r\n  \r\n          config += ('interface %s\\n' % neighbor['port'])\r\n          config +=  ('   description LLDP:%s:%s\\n' % (nghb, neighbor['neighborPort']))\r\n          config += '!\\n'\r\n  \r\n  if (leafNr == ''):\r\n    print ('! ERROR: Could not determine IPMI position')\r\n    return\r\n  \r\n  hostName = 'sw-%s-%s-%s' % (LOCATION, leafType, leafNr)\r\n  \r\n  config = 'hostname %s\\n!\\n%s' % (hostName, config)\r\n  \r\n  # ========== Ma1 config ==========\r\n  config += ('interface Management1\\n')\r\n  if (MA_VRF != ''):\r\n      config += ('   {{eos.c_vrf_forwarding}} %s\\n' % MA_VRF)\r\n  # DNS lookup for hostname to discover Ma1 IP\r\n  try:\r\n    config += ('   ip address %s\/%s\\n' % (socket.gethostbyname (hostName + '.' + MA_DOMAIN), MA_MASK))\r\n  except Exception as err:\r\n    print '! ERROR: Not able to resolve the Ma1 address: %s (%s)' % (hostName + '.' + MA_DOMAIN, err)\r\n    return\r\n  config += '!\\n'\r\n  \r\n  # ========== VL900 config ==========\r\n  config += ('interface Vlan900\\n')\r\n  config += ('   description NW-MGMT\\n')\r\n  if (VL900_VRF != ''):\r\n      config += ('   {{eos.c_vrf_forwarding}} %s\\n' % VL900_VRF)\r\n  # DNS lookup for hostname to discover Vl900 IP\r\n  try:\r\n    config += ('   ip address %s\/%s\\n' % (socket.gethostbyname (hostName + '.' + VL900_DOMAIN), VL900_MASK))\r\n  except Exception as err:\r\n    print '! ERROR: Not able to resolve the Vl900 address: %s (%s)' % (hostName + '.' + VL900_DOMAIN, err)\r\n    return\r\n  config += '!\\n'\r\n  # ====================\r\n  \r\n  \r\n  server = cvp.Cvp('localhost')\r\n  try:\r\n    server.authenticate(cvpuser, cvppasswd)\r\n  except Exception as err:\r\n    print '! ERROR: Unable to authenticate to the CVP server as user: %s (%s)' % (cvpuser, err)\r\n    return\r\n\r\n  # Provides dev.ipAddress, dev.fqdn, dev.macAddress, dev.containerName,\r\n  # dev.status, dev.model, dev.sn\r\n  try:\r\n    dev = server.getDevice (mac)\r\n  except Exception as err:\r\n    print '! ERROR: Something went wrong during hostname identification (%s)' % (err)\r\n    return\r\n  \r\n  print '! === autoconf report ==='\r\n  \r\n  # =======================================================\r\n  # Create and assign the individual configlet\r\n  # =======================================================\r\n  configlet_name = '%s' % hostName\r\n  \r\n  try:\r\n    cfg = server.cvpService.getConfigletByName (configlet_name)\r\n    print ('! Configlet %s already exists. Delete\/rename to re-create!' % configlet_name)\r\n  except cvp.cvpServices.CvpError as err:\r\n    if (err.errorCode == errorCodes.ENTITY_DOES_NOT_EXIST):\r\n      try:\r\n        server.cvpService.addConfiglet (configlet_name, config)\r\n        cfg = server.cvpService.getConfigletByName (configlet_name)\r\n        server.cvpService.applyConfigletToDevice (dev.ipAddress, dev.fqdn, mac, [configlet_name], [cfg['key']], [], [])\r\n        print '! Configlet %s created and assigned' % configlet_name\r\n      except Exception as err:\r\n        print '! ERROR: Not able to add configlet %s! (%s)' % (configlet_name, err)\r\n        return\r\n    else:\r\n      print '! ERROR: Communication issues with configlet %s! (%s)' % (configlet_name, err)\r\n      return\r\n\r\n  print '! ======================='\r\n  print config\r\n  # =======================================================\r\n\r\nmain()\r\n\r\n","key":null}}}
