# file: roles/cvp/tasks/main.yml
---
- name: "Gather CVP facts from {{inventory_hostname}}"
  arista.cvp.cv_facts:
  register: cvp_facts
  tags:
    - upload_configlets
    - create_containers
    - configlets_assign
    - delete_configlets
    - configure_aaa
    - reload_TerminAttr
    - delete_containers

# start work on configlet (static and dynamic builders), containers
#  and maintain them on the cvp server itself
- name: Check if directory for configlet builders exists
  delegate_to: 127.0.0.1
  stat:
    path: '{{role_path}}/files/configlet_builders'
  register: dir_to_delete
  tags:
    - configlets

- name: Delete {{role_path}}/files/configlet_builders if exists
  delegate_to: 127.0.0.1
  file:
    state: absent
    path: '{{role_path}}/files/configlet_builders'
  when: dir_to_delete.stat.exists and dir_to_delete.stat.isdir
  tags:
    - configlets

- name: Create directory for configlet_builders again
  delegate_to: 127.0.0.1
  file:
    state: directory
    path: '{{role_path}}/files/configlet_builders'
  when: dir_to_delete is defined or dir_to_delete.stat.exist == False
  tags:
    - configlets

- name: Check if directory for configs exists
  delegate_to: 127.0.0.1
  stat:
    path: '{{role_path}}/files/configs'
  register: dir_to_delete
  tags:
    - configlets

- name: Delete {{role_path}}/files/configs if exists
  delegate_to: 127.0.0.1
  file:
    state: absent
    path: '{{role_path}}/files/configs'
  when: dir_to_delete.stat.exists and dir_to_delete.stat.isdir
  tags:
    - configlets

- name: Create directory for configs again
  delegate_to: 127.0.0.1
  file:
    state: directory
    path: '{{role_path}}/files/configs'
  when: dir_to_delete is defined or dir_to_delete.stat.exist == False
  tags:
    - configlets

# see Github Issue #195
# - name: Grab Spine interfaces
#   delegate_to: 127.0.0.1
#   connection: network_cli
#   eos_facts:
#     host: "{{ hec.oob_prefix }}.11"
#     gather_subset: min
#     gather_network_resources: interfaces
#   ignore_errors: yes
#   ignore_unreachable: yes
#   tags:
#     - configlets
#
# - name: Store the Spine interfaces in a file
#   delegate_to: 127.0.0.1
#   copy:
#     content: '{{ansible_network_resources | to_nice_yaml}}'
#     dest: '{{role_path}}/files/configs/spine_interfaces'
#   ignore_errors: yes
#   ignore_unreachable: yes
#   tags:
#     - configlets
#
# - name: Include interface for Spine from file
#   delegate_to: 127.0.0.1
#   include_vars:
#     file: '{{role_path}}/files/configs/spine_interfaces'
#     name: spine_interfaces
#   ignore_errors: yes
#   ignore_unreachable: yes
#   tags:
#     - configlets

- name: Render all templates
  delegate_to: 127.0.0.1
  template:
    src: "templates/{{item}}.j2"
    dest: "{{role_path}}/files/configs/{{item}}"
  loop:
    - sw-hec
    - sw-hec-oob
    - sw-hec-aaa
    - sw-hec-snmp
    - sw-hec-fab-snmp
    - sw-hec-switch-snmp
    - sw-hec-oob-snmp
    - sw-hec-ntp
    - sw-hec-fab-ntp
    - sw-hec-switch-ntp
    - sw-hec-logging
    - sw-hec-oob-logging
    - sw-hec-fab-logging
    - sw-hec-switch-logging
    - sw-hec-switch-sflow
    - sw-hec-switch-V900
    - sw-hec-fab-L900
    - sw-hec-oob-vrf
    - sw-hec-tele-oob
    - HEC-IPMI
    - sw-hec-oob-common
    - sw-hec-tele-default
    - HEC-VLANs
    - hec-hana
    - sw-hec-leaf
    - hec-vmware
    - hec-vmware-L2
    - hec-xen
    - sw-hec-hana-7160-32CQ
    - sw-hec-hana-7160-48YC6
    - sw-hec-hana-pwr-7160-32CQ
    - sw-hec-hvv-7160-32CQ
    - sw-hec-6xx-7160-32CQ
    - sw-hec-6xx-7150S-64-CL
    - sw-hec-hvx-7160-32CQ
    - sw-hec-hvx-7160-48YC6
    - sw-hec-hvv-7050CX3-32S
    - sw-mlag-a
    - sw-mlag-b
    - mgmt-oob
    - mgmt-default
    - sw-hec-vtep
    - hec-shs
    - autoconf.ini
    - hec_sw_leaf_individual
    - hec_sw_leaf_pair
    - 7160-profile-tcam-acl
    - vxlan1-shutdown
    - maintenancemode
    - maintenancemode-ha
  tags:
    - configlets

# next task is to reuse the sw-hec-aaa.j2 template but generate the hana-specific authentication settings.
- set_fact:
    aaa_purpose: 'hana'
  tags:
    - configlets

- name: Render hana aaa configlet template
  delegate_to: 127.0.0.1
  template:
    src: "templates/sw-hec-aaa.j2"
    dest: "{{role_path}}/files/configs/{{item}}"
  loop:
    - sw-hec-aaa-hana
  tags:
    - configlets

# next task is to reuse the sw-hec-aaa.j2 template but generate the oob- & fwt-specific authentication settings.
- set_fact:
    aaa_purpose: 'oob'
  tags:
    - oob
    - fwt
    - configlets

- name: Render oob & fwt aaa configlet template
  delegate_to: 127.0.0.1
  template:
    src: "templates/sw-hec-aaa.j2"
    dest: "{{role_path}}/files/configs/{{item}}"
  loop:
    - sw-hec-aaa-oob
    - sw-hec-aaa-fwt
  tags:
    - configlets

- name: Render all configlet_builder templates
  delegate_to: 127.0.0.1
  template:
    src: "templates/{{item}}.j2"
    dest: "{{role_path}}/files/configlet_builders/{{item}}"
  loop:
    - sw-hec-autoconf
    - sw-hec-autoconf-ipmi
    - sw-hec-descriptions
    - sw-hec-descriptions-hvv
    - sw-hec-autoconf-generate-only
    - sw-hec-autoconf-ipmi-generate-only
    - rt-hec-ha-core-customer-builder
  tags:
    - configlets

- name: Render generic spine configlet per POD
  delegate_to: 127.0.0.1
  template:
    src: "templates/sw-hec-spine.j2"
    dest: "{{role_path}}/files/configs/sw-hec-spine-{{ item.id }}x"
  with_items: "{{ hec.spine.pod.number }}"
  tags:
    - configlets
    - spines

- name: Render sw-hec-spine-xx
  delegate_to: 127.0.0.1
  template:
    src: "templates/sw-hec-spine-xx.j2"
    dest: "{{role_path}}/files/configs/sw-hec-spine-{{ item.id }}"
  with_items: "{{ hec.spine.number }}"
  tags:
    - configlets
    - spines

- name: Render sw-hec-superspine-xx
  delegate_to: 127.0.0.1
  template:
    src: "templates/sw-hec-superspine-xx.j2"
    dest: "{{role_path}}/files/configs/sw-hec-superspine-{% if item.id < 10 %}0{% endif %}{{ item.id }}"
  with_items: "{{ hec.superspine.number }}"
  when: hec.superspine|default("") != ""
  tags:
    - configlets
    - superspines

- name: Render sw-hec-oob-xx
  delegate_to: 127.0.0.1
  template:
    src: "templates/sw-hec-oob-xx.j2"
    dest: "{{role_path}}/files/configs/sw-hec-oob-{{ item.number }}"
  with_items: "{{ hec.oob }}"
  tags:
    - configlets
    - oob

- name: Render sw-hec-fwt-xx
  delegate_to: 127.0.0.1
  template:
    src: "templates/sw-hec-fwt-xx.j2"
    dest: "{{role_path}}/files/configs/sw-hec-fwt-{{ item.number }}"
  with_items: "{{ hec.fwt }}"
  #ignore_errors: yes
  tags:
    - configlets
    - fwt

- set_fact:
    id: 'b'
  tags:
    - configlets
    - borderleafs

- name: "Render Borderleafs"
  delegate_to: 127.0.0.1
  template:
    src: templates/hec_sw_borderleaf.j2
    dest: "{{role_path}}/files/configs/sw-hec-brdr-{%if item.number is match('^[1-9][a-z]$') %}0{% endif %}{{item.number}}"
  loop: '{{ hec.brdr }}'
  tags:
    - configlets
    - borderleafs

- set_fact:
    id: 's'
  tags:
    - configlets
    - storageleafs

- name: "Render Storageleafs"
  delegate_to: 127.0.0.1
  template:
    src: templates/hec_sw_borderleaf.j2
    dest: "{{role_path}}/files/configs/sw-hec-str-{%if item.number is match('^[1-9][a-z]$') %}0{% endif %}{{item.number}}"
  loop: '{{ hec.str }}'
  tags:
    - configlets
    - storageleafs

- set_fact:
    id: 'h'
  tags:
    - configlets
    - storageleafs

- name: "Render Shared Hana Storageleafs"
  delegate_to: 127.0.0.1
  template:
    src: templates/hec_sw_borderleaf.j2
    dest: "{{role_path}}/files/configs/sw-hec-shs-{%if item.number is match('^[1-9][a-z]$') %}0{% endif %}{{item.number}}"
  loop: '{{ hec.shs }}'
  when: hec.shs is defined
  tags:
    - configlets
    - storageleafs

- name: Render sw-hec-interdc
  delegate_to: 127.0.0.1
  template:
    src: templates/sw-hec-interdc.j2
    dest: "{{role_path}}/files/configs/sw-hec-interdc{{item.number}}"
  with_items: "{{ hec.interdc }}"
  when: hec.interdc is defined
  tags:
    - configlets
    - interdc

- name: Render HANA Power
  delegate_to: 127.0.0.1
  template:
    src: "templates/sw-hec-hana-pwr.j2"
    dest: "{{role_path}}/files/configs/sw-hec-hana-pwr"
  tags:
    - configlets

- name: Render rt-hec-ha-shared
  delegate_to: 127.0.0.1
  template:
    src: "templates/rt-hec-ha-shared.j2"
    dest: "{{role_path}}/files/configs/rt-hec-ha-shared"
  when: hec.ngdr is defined
  with_items: "{{ hec.ngdr }}"
  tags:
    - configlets
    - ngdr

- name: Render rt-hec-ha-core-01x
  delegate_to: 127.0.0.1
  template:
    src: "templates/rt-hec-ha-core-01x.j2"
    dest: "{{role_path}}/files/configs/rt-hec-ha-core-0{{ item.number }}"
  when: hec.ngdr is defined
  with_items: "{{ hec.ngdr }}"
  tags:
    - configlets
    - ngdr

- name: Copy configlet builders to the CVP
  delegate_to: "{{ cvp.ip_eth0 }}"
  copy:
    src: "{{role_path}}/files/configlet_builders/"
    dest: tmp
  tags:
    - upload_configlets

- name: Copy python upload script for configlet builders to CVP
  delegate_to: "{{ cvp.ip_eth0 }}"
  copy:
    src: "{{role_path}}/files/configlet_builder.py"
    dest: tmp/configlet_builder.py
  tags:
    - upload_configlets

- name: Copy cvprac to tmp/cvprac/ direcory on CVP
  delegate_to: "{{ cvp.ip_eth0 }}"
  copy:
    src: "{{role_path}}/files/cvprac"
    dest: tmp
  tags:
    - reload_TerminAttr
    - upload_configlets

- name: Upload generated configlet builders
  delegate_to: "{{ cvp.ip_eth0 }}"
  command: python tmp/configlet_builder.py "{{role_path}}/files/configlet_builders/" "{{ cvp.ip_eth0 }}" "{{ cvp.password }}"
  tags:
    - upload_configlets

- name: lookup global configlets
  set_fact:
    configlet_list: "{{ configlet_list|default({}) | combine({item: lookup('file', 'configs/'+item)}) }}"
  with_items: "{{ configlet_list_global }}"
  tags:
    - upload_configlets

- name: lookup DC-specific configlets
  set_fact:
    configlet_list: "{{ configlet_list|default({}) | combine({item: lookup('file', 'configs/'+item)}) }}"
  with_items: "{{ configlet_list_dc_specific }}"
  when: configlet_list_dc_specific|default(None)
  tags:
    - upload_configlets

- name: Create filter list from global configlet list
  set_fact:
    configlet_filter: "{{ configlet_list_global|default({}) }}"
  tags:
    - upload_configlets

- name: Add specific configlet lists to global filter list
  set_fact:
    configlet_filter: "{{ configlet_filter + configlet_list_dc_specific }}"
  when: configlet_list_dc_specific|default(None)
  tags:
    - upload_configlets

# - name: Demonstrate merged lists
#   debug: var=configlet_filter
#   tags:
#     - upload_configlets

- name: "Upload configlets to {{inventory_hostname}} instance"
  arista.cvp.cv_configlet:
    cvp_facts: "{{ cvp_facts.ansible_facts }}"
    configlets: "{{ configlet_list }}"
    configlet_filter: "{{ configlet_filter }}"
    state: present
    #filter_mode: strict
  register: cvp_configlet
  ignore_errors: yes
  tags:
    - upload_configlets

# - name: "Upload all global configlets to {{inventory_hostname}} instance"
#   arista.cvp.cv_configlet:
#     cvp_facts: "{{ cvp_facts.ansible_facts }}"
#     configlets: "{{ lookup('file', 'configs/'+item) }}"
#     configlet_filter: "{{ configlet_filter_list_global }}"
#     state: present
#   register: cvp_configlet
#   with_items:
#     - configlet_filter_list_global
#   tags:
#     - upload_configlets
#
# - name: "Upload some DC specific configlets to {{inventory_hostname}} instance"
#   arista.cvp.cv_configlet:
#     cvp_facts: "{{ cvp_facts.ansible_facts }}"
#     configlets: "{{ lookup('file', 'configs/'+item) }}"
#     configlet_filter: "{{ configlet_filter_list_dc_specific }}"
#     state: present
#   register: cvp_configlet
#   with_items:
#     - configlet_filter_list_dc_specific
#   tags:
#     - upload_configlets

- name: "Build Container topology on {{inventory_hostname}} and assign configlets"
  arista.cvp.cv_container:
    topology: "{{container}}"
    cvp_facts: "{{cvp_facts.ansible_facts}}"
    mode: merge
  tags:
    - create_containers
    - configlets_assign

- name: "Delete all defined configlets from {{inventory_hostname}} instance"
  arista.cvp.cv_configlet:
    cvp_facts: "{{ cvp_facts.ansible_facts }}"
    configlets: "{{ configlet_list }}"
    configlet_filter: "{{ configlet_filter_list_generic }}"
    state: absent
  register: cvp_configlet
  tags:
    - delete_configlets

- name: "Delete all defined containers from {{inventory_hostname}}"
  arista.cvp.cv_container:
    topology: "{{container}}"
    cvp_facts: "{{cvp_facts.ansible_facts}}"
    mode: delete
  tags:
    - delete_containers

- name: Copy aaa server creation script to CVP
  delegate_to: "{{ cvp.ip_eth0 }}"
  copy:
    src: "{{role_path}}/files/aaa_configuration.py"
    dest: tmp/aaa_configuration.py
  tags:
    - configure_aaa

- name: Configure AAA servers
  delegate_to: "{{ cvp.ip_eth0 }}"
  command: python tmp/aaa_configuration.py "{{ cvp.aaa_config }}" "{{ cvp.ip_eth0 }}" "{{ cvp.password }}"
  tags:
    - configure_aaa

- name: Copy restore_reload_TerminAttr.py to CVP
  delegate_to: "{{ cvp.ip_eth0 }}"
  copy:
    src: "{{role_path}}/files/restore_reload_TerminAttr.py"
    dest: tmp/restore_reload_TerminAttr.py
  tags:
    - reload_TerminAttr

- name: Reload TerminAttr on devices after restoring a backup
  delegate_to: "{{ cvp.ip_eth0 }}"
  command: "python tmp/restore_reload_TerminAttr.py {{ cvp.ip_eth0 }} {{ cvp.password }}"
  tags:
    - reload_TerminAttr

- name: dummy task to test dependencies
  debug:
    msg: "{{ mapping }}" # this should come from repo_hec_globals default variables
  tags:
    - test_deps
