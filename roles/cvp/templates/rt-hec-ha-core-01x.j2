{% import "templates/libs.j2" as funcs with context %}
hostname rt-hec{{ hec.hec_nr }}-ha-core-0{{ item.number }}
!
snmp-server contact {{ item.snmp.contact }}
snmp-server location {{ item.snmp.location }}
!
bfd local-address {{ item.loopback1_ip }}
!
{% if item.ports is defined %}
{% for port in item.ports %}
{{ funcs.switchport(port) }}
{% endfor %}
{% endif %}{# end of port generation #}
{% if item.port_channels is defined %}
{% for po in item.port_channels %}
{{ funcs.switchportchannels(po) }}
{% endfor %}
{% endif %}{# end of port-channel generation #}
{% set uplink_ipv4 = funcs.uplink_port_ip(item.spine_port_towards_leaf) %}
{% set nextsubnet = uplink_ipv4.split('.')[0] %}
{% set link_ip = uplink_ipv4.split('.')[1] %}
{% for interface in item.uplinks %}
interface Ethernet{{ interface }}
   description ->sw-hec{{ hec.hec_nr }}-spine-{{ loop.index + 10 }}, {{ item.spine_port_towards_leaf }}
   ip address 10.{{ loop.index + 10 }}.{{ nextsubnet }}.{{ link_ip }}/31
!
{% endfor %}
!
interface Loopback1
   ip address {{ item.loopback1_ip }}/32
   ip address 10.254.200.1/32 secondary
!
interface Loopback900
   ip address {{ item.nwmgmt_ip }}/32
!
interface Management1
   ip address {{ item.oob_ip }}/{{hec.oob_mask}}
!
{% for interface in item.ports %}
{% if interface.id == '26/1' %}
{% set local_ha_ip_last_octett = interface.ip.split("/")[0].split(".")[3] | int %}
{% if local_ha_ip_last_octett % 2 == 0 %}
{% set remote_ha_ip_last_octett = local_ha_ip_last_octett | int +1 %}
{% else %}
{% set remote_ha_ip_last_octett = local_ha_ip_last_octett | int -1 %}
{% endif %}
{% set remote_ha_ip = interface.ip.split(".")[0] + "." + interface.ip.split(".")[1] + "." + interface.ip.split(".")[2] + "." + remote_ha_ip_last_octett | string %}
{% for remote_edge in hec.ngdr_overlay.remote_edge_routers %}
ip route {{ remote_edge.ip }}/32 Ethernet{{ interface.id }} {{ remote_ha_ip }}
{% endfor %}
{% endif %}
{% endfor %}

{% for interface in item.ports %}
{% if interface.id == '26/1' %}
{% set local_ha_ip_last_octett = interface.ip.split("/")[0].split(".")[3] | int %}
{% if local_ha_ip_last_octett % 2 == 0 %}
{% set remote_ha_ip_last_octett = local_ha_ip_last_octett | int +1 %}
{% else %}
{% set remote_ha_ip_last_octett = local_ha_ip_last_octett | int -1 %}
{% endif %}
{% set remote_ha_ip = interface.ip.split(".")[0] + "." + interface.ip.split(".")[1] + "." + interface.ip.split(".")[2] + "." + remote_ha_ip_last_octett | string %}
ip route {{ item.remote_ha_ip }}/32 Ethernet{{ interface.id }} {{ remote_ha_ip }}
{% endif %}
{% endfor %}
!
router bgp 641{{ hec.hec_nr }}.10999
   router-id {{ item.loopback1_ip }}
{% for interface in item.uplinks %}
   neighbor 10.{{ loop.index + 10 }}.{{ nextsubnet }}.{{ link_ip | int -1 }} {{eos_cmd.c_neighbor_peer_group}} PG-SPINE
{% endfor %}

{% for interface in item.ports %}
{% if interface.id == '26/1' %}
{% set local_ha_ip_last_octett = interface.ip.split("/")[0].split(".")[3] | int %}
{% if local_ha_ip_last_octett % 2 == 0 %}
{% set remote_ha_ip_last_octett = local_ha_ip_last_octett | int +1 %}
{% else %}
{% set remote_ha_ip_last_octett = local_ha_ip_last_octett | int -1 %}
{% endif %}
{% set remote_ha_ip = interface.ip.split(".")[0] + "." + interface.ip.split(".")[1] + "." + interface.ip.split(".")[2] + "." + remote_ha_ip_last_octett | string %}
   neighbor {{ remote_ha_ip }} {{eos_cmd.c_neighbor_peer_group}} PG-RMT-HA-ROUTER
   neighbor {{ remote_ha_ip }} description *** BGP to rt-hec{{ hec.ngdr_overlay.remote_hec_nr }}-ha-core-0{{ item.number}} ***
   address-family evpn
      neighbor {{ remote_ha_ip }} activate
{% endif %}
{% endfor %}

{% set myip = item.loopback1_ip %}
{% set ippart = myip.split(".")[3] %}
{% if item.number is search('\da') %}
{% set mydict = {'b': (myip|ipmath(1)), 'c': (myip|ipmath(2)), 'd': (myip|ipmath(3)) } %}
{# {% elif item.number is search('\db') %}
{% set mydict = {'c': myip|ipmath(1), 'd': myip|ipmath(2), 'a': myip|ipmath(-1) } %}
{% elif item.number is search('\dc') %}
{% set mydict = {'d': myip|ipmath(1), 'a': myip|ipmath(-2), {'b': myip|ipmath(-1) } %}
{% elif item.number is search('\dd') %}
{% set mydict = {'a': myip|ipmath(-3), 'b': myip|ipmath(-2), {'c': myip|ipmath(-1) } %} #}
{% endif %}
!--------------------------
MYDICT {{ mydict }}
{% for nghb in mydict %}
   neighbor {{ nghb[1] }} description *** EVPN to rt-hec{{ hec.hec_nr }}-ha-core-01{{ nghb[0] }} ***
   !
   address-family evpn
      neighbor {{ nghb[1] }} activate
{% endfor %}
!--------------------------

{% if item.number == '1a' %}
{% set ha_neighbor1_ip = item.loopback1_ip.split(".")[3] | int +1 %}
{% set ha_neighbor1_letter = 'b' %}
{% set ha_neighbor2_ip = item.loopback1_ip.split(".")[3] | int +2 %}
{% set ha_neighbor2_letter = 'c' %}
{% set ha_neighbor3_ip = item.loopback1_ip.split(".")[3] | int +3 %}
{% set ha_neighbor3_letter = 'd' %}
{% elif item.number == '1b' %}
{% set ha_neighbor1_ip = item.loopback1_ip.split(".")[3] | int -1 %}
{% set ha_neighbor1_letter = 'a' %}
{% set ha_neighbor2_ip = item.loopback1_ip.split(".")[3] | int +1 %}
{% set ha_neighbor2_letter = 'c' %}
{% set ha_neighbor3_ip = item.loopback1_ip.split(".")[3] | int +2 %}
{% set ha_neighbor3_letter = 'd' %}
{% elif item.number == '1c' %}
{% set ha_neighbor1_ip = item.loopback1_ip.split(".")[3] | int -2 %}
{% set ha_neighbor1_letter = 'a' %}
{% set ha_neighbor2_ip = item.loopback1_ip.split(".")[3] | int -1 %}
{% set ha_neighbor2_letter = 'b' %}
{% set ha_neighbor3_ip = item.loopback1_ip.split(".")[3] | int +1 %}
{% set ha_neighbor3_letter = 'd' %}
{% elif item.number == '1d' %}
{% set ha_neighbor1_ip = item.loopback1_ip.split(".")[3] | int -3 %}
{% set ha_neighbor1_letter = 'a' %}
{% set ha_neighbor2_ip = item.loopback1_ip.split(".")[3] | int -2 %}
{% set ha_neighbor2_letter = 'b' %}
{% set ha_neighbor3_ip = item.loopback1_ip.split(".")[3] | int -1 %}
{% set ha_neighbor3_letter = 'c' %}
{% endif %}
   neighbor {{ item.loopback1_ip.split(".")[0] }}.{{ item.loopback1_ip.split(".")[1] }}.{{ item.loopback1_ip.split(".")[2] }}.{{ ha_neighbor1_ip }} {{eos_cmd.c_neighbor_peer_group}} PG-HA-ROUTER
   neighbor {{ item.loopback1_ip.split(".")[0] }}.{{ item.loopback1_ip.split(".")[1] }}.{{ item.loopback1_ip.split(".")[2] }}.{{ ha_neighbor1_ip }} description *** EVPN to rt-hec{{ hec.hec_nr }}-ha-core-01{{ ha_neighbor1_letter }} ***
   neighbor {{ item.loopback1_ip.split(".")[0] }}.{{ item.loopback1_ip.split(".")[1] }}.{{ item.loopback1_ip.split(".")[2] }}.{{ ha_neighbor2_ip }} {{eos_cmd.c_neighbor_peer_group}} PG-HA-ROUTER
   neighbor {{ item.loopback1_ip.split(".")[0] }}.{{ item.loopback1_ip.split(".")[1] }}.{{ item.loopback1_ip.split(".")[2] }}.{{ ha_neighbor2_ip }} description *** EVPN to rt-hec{{ hec.hec_nr }}-ha-core-01{{ ha_neighbor2_letter }} ***
   neighbor {{ item.loopback1_ip.split(".")[0] }}.{{ item.loopback1_ip.split(".")[1] }}.{{ item.loopback1_ip.split(".")[2] }}.{{ ha_neighbor3_ip }} {{eos_cmd.c_neighbor_peer_group}} PG-HA-ROUTER
   neighbor {{ item.loopback1_ip.split(".")[0] }}.{{ item.loopback1_ip.split(".")[1] }}.{{ item.loopback1_ip.split(".")[2] }}.{{ ha_neighbor3_ip }} description *** EVPN to rt-hec{{ hec.hec_nr }}-ha-core-01{{ ha_neighbor3_letter }} ***
   !
   address-family evpn
      neighbor {{ item.loopback1_ip.split(".")[0] }}.{{ item.loopback1_ip.split(".")[1] }}.{{ item.loopback1_ip.split(".")[2] }}.{{ ha_neighbor1_ip }} activate
      neighbor {{ item.loopback1_ip.split(".")[0] }}.{{ item.loopback1_ip.split(".")[1] }}.{{ item.loopback1_ip.split(".")[2] }}.{{ ha_neighbor2_ip }} activate
      neighbor {{ item.loopback1_ip.split(".")[0] }}.{{ item.loopback1_ip.split(".")[1] }}.{{ item.loopback1_ip.split(".")[2] }}.{{ ha_neighbor3_ip }} activate
   !
{% if hec.fabric.vtep_distribution_mode == "evpn" %}
   vlan-aware-bundle all-vlans
      rd {{ item.loopback1_ip }}:1
   !
{% endif %}
   address-family ipv4
{% for interface in item.uplinks %}
      neighbor 10.{{ loop.index + 10 }}.{{ nextsubnet }}.{{ link_ip | int -1 }} activate
{% endfor %}
      network 10.254.200.1/32
      network {{ item.nwmgmt_ip }}/32
      network {{ item.remote_ha_ip }}/32
      network {{ item.loopback1_ip }}/32
   !
!
